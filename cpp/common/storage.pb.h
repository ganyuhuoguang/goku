// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_storage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_storage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_storage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_storage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_storage_2eproto;
namespace novumind {
namespace goku {
namespace proto {
namespace storage {
class Box;
class BoxDefaultTypeInternal;
extern BoxDefaultTypeInternal _Box_default_instance_;
class CaffeLoader;
class CaffeLoaderDefaultTypeInternal;
extern CaffeLoaderDefaultTypeInternal _CaffeLoader_default_instance_;
class Detail;
class DetailDefaultTypeInternal;
extern DetailDefaultTypeInternal _Detail_default_instance_;
class ExampleInfo;
class ExampleInfoDefaultTypeInternal;
extern ExampleInfoDefaultTypeInternal _ExampleInfo_default_instance_;
class FrameMetadata;
class FrameMetadataDefaultTypeInternal;
extern FrameMetadataDefaultTypeInternal _FrameMetadata_default_instance_;
class ImageSize;
class ImageSizeDefaultTypeInternal;
extern ImageSizeDefaultTypeInternal _ImageSize_default_instance_;
class Loader;
class LoaderDefaultTypeInternal;
extern LoaderDefaultTypeInternal _Loader_default_instance_;
class Model;
class ModelDefaultTypeInternal;
extern ModelDefaultTypeInternal _Model_default_instance_;
class ModelGroup;
class ModelGroupDefaultTypeInternal;
extern ModelGroupDefaultTypeInternal _ModelGroup_default_instance_;
class ModelOutput;
class ModelOutputDefaultTypeInternal;
extern ModelOutputDefaultTypeInternal _ModelOutput_default_instance_;
class ModelParam;
class ModelParamDefaultTypeInternal;
extern ModelParamDefaultTypeInternal _ModelParam_default_instance_;
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TensorLoader;
class TensorLoaderDefaultTypeInternal;
extern TensorLoaderDefaultTypeInternal _TensorLoader_default_instance_;
class ThresholdIdx;
class ThresholdIdxDefaultTypeInternal;
extern ThresholdIdxDefaultTypeInternal _ThresholdIdx_default_instance_;
}  // namespace storage
}  // namespace proto
}  // namespace goku
}  // namespace novumind
PROTOBUF_NAMESPACE_OPEN
template<> ::novumind::goku::proto::storage::Box* Arena::CreateMaybeMessage<::novumind::goku::proto::storage::Box>(Arena*);
template<> ::novumind::goku::proto::storage::CaffeLoader* Arena::CreateMaybeMessage<::novumind::goku::proto::storage::CaffeLoader>(Arena*);
template<> ::novumind::goku::proto::storage::Detail* Arena::CreateMaybeMessage<::novumind::goku::proto::storage::Detail>(Arena*);
template<> ::novumind::goku::proto::storage::ExampleInfo* Arena::CreateMaybeMessage<::novumind::goku::proto::storage::ExampleInfo>(Arena*);
template<> ::novumind::goku::proto::storage::FrameMetadata* Arena::CreateMaybeMessage<::novumind::goku::proto::storage::FrameMetadata>(Arena*);
template<> ::novumind::goku::proto::storage::ImageSize* Arena::CreateMaybeMessage<::novumind::goku::proto::storage::ImageSize>(Arena*);
template<> ::novumind::goku::proto::storage::Loader* Arena::CreateMaybeMessage<::novumind::goku::proto::storage::Loader>(Arena*);
template<> ::novumind::goku::proto::storage::Model* Arena::CreateMaybeMessage<::novumind::goku::proto::storage::Model>(Arena*);
template<> ::novumind::goku::proto::storage::ModelGroup* Arena::CreateMaybeMessage<::novumind::goku::proto::storage::ModelGroup>(Arena*);
template<> ::novumind::goku::proto::storage::ModelOutput* Arena::CreateMaybeMessage<::novumind::goku::proto::storage::ModelOutput>(Arena*);
template<> ::novumind::goku::proto::storage::ModelParam* Arena::CreateMaybeMessage<::novumind::goku::proto::storage::ModelParam>(Arena*);
template<> ::novumind::goku::proto::storage::Task* Arena::CreateMaybeMessage<::novumind::goku::proto::storage::Task>(Arena*);
template<> ::novumind::goku::proto::storage::TensorLoader* Arena::CreateMaybeMessage<::novumind::goku::proto::storage::TensorLoader>(Arena*);
template<> ::novumind::goku::proto::storage::ThresholdIdx* Arena::CreateMaybeMessage<::novumind::goku::proto::storage::ThresholdIdx>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace novumind {
namespace goku {
namespace proto {
namespace storage {

enum Task_StatusCode : int {
  Task_StatusCode_PENDING = 0,
  Task_StatusCode_RUNNING = 1,
  Task_StatusCode_SUCCESS = 2,
  Task_StatusCode_FAILED = 3,
  Task_StatusCode_Task_StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Task_StatusCode_Task_StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Task_StatusCode_IsValid(int value);
constexpr Task_StatusCode Task_StatusCode_StatusCode_MIN = Task_StatusCode_PENDING;
constexpr Task_StatusCode Task_StatusCode_StatusCode_MAX = Task_StatusCode_FAILED;
constexpr int Task_StatusCode_StatusCode_ARRAYSIZE = Task_StatusCode_StatusCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Task_StatusCode_descriptor();
template<typename T>
inline const std::string& Task_StatusCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Task_StatusCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Task_StatusCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Task_StatusCode_descriptor(), enum_t_value);
}
inline bool Task_StatusCode_Parse(
    const std::string& name, Task_StatusCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Task_StatusCode>(
    Task_StatusCode_descriptor(), name, value);
}
// ===================================================================

class Task PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:novumind.goku.proto.storage.Task) */ {
 public:
  inline Task() : Task(nullptr) {};
  virtual ~Task();

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(nullptr);
  }

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "novumind.goku.proto.storage.Task";
  }
  protected:
  explicit Task(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Task_StatusCode StatusCode;
  static constexpr StatusCode PENDING =
    Task_StatusCode_PENDING;
  static constexpr StatusCode RUNNING =
    Task_StatusCode_RUNNING;
  static constexpr StatusCode SUCCESS =
    Task_StatusCode_SUCCESS;
  static constexpr StatusCode FAILED =
    Task_StatusCode_FAILED;
  static inline bool StatusCode_IsValid(int value) {
    return Task_StatusCode_IsValid(value);
  }
  static constexpr StatusCode StatusCode_MIN =
    Task_StatusCode_StatusCode_MIN;
  static constexpr StatusCode StatusCode_MAX =
    Task_StatusCode_StatusCode_MAX;
  static constexpr int StatusCode_ARRAYSIZE =
    Task_StatusCode_StatusCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StatusCode_descriptor() {
    return Task_StatusCode_descriptor();
  }
  template<typename T>
  static inline const std::string& StatusCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StatusCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StatusCode_Name.");
    return Task_StatusCode_Name(enum_t_value);
  }
  static inline bool StatusCode_Parse(const std::string& name,
      StatusCode* value) {
    return Task_StatusCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kModelGroupIdsFieldNumber = 6,
    kLabelsFieldNumber = 8,
    kIdFieldNumber = 1,
    kVideoUrlFieldNumber = 2,
    kSnapshotFieldNumber = 7,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kStatusCodeFieldNumber = 5,
  };
  // repeated string model_group_ids = 6;
  int model_group_ids_size() const;
  private:
  int _internal_model_group_ids_size() const;
  public:
  void clear_model_group_ids();
  const std::string& model_group_ids(int index) const;
  std::string* mutable_model_group_ids(int index);
  void set_model_group_ids(int index, const std::string& value);
  void set_model_group_ids(int index, std::string&& value);
  void set_model_group_ids(int index, const char* value);
  void set_model_group_ids(int index, const char* value, size_t size);
  std::string* add_model_group_ids();
  void add_model_group_ids(const std::string& value);
  void add_model_group_ids(std::string&& value);
  void add_model_group_ids(const char* value);
  void add_model_group_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& model_group_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_model_group_ids();
  private:
  const std::string& _internal_model_group_ids(int index) const;
  std::string* _internal_add_model_group_ids();
  public:

  // repeated string labels = 8;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  const std::string& labels(int index) const;
  std::string* mutable_labels(int index);
  void set_labels(int index, const std::string& value);
  void set_labels(int index, std::string&& value);
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  std::string* add_labels();
  void add_labels(const std::string& value);
  void add_labels(std::string&& value);
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_labels();
  private:
  const std::string& _internal_labels(int index) const;
  std::string* _internal_add_labels();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string video_url = 2;
  void clear_video_url();
  const std::string& video_url() const;
  void set_video_url(const std::string& value);
  void set_video_url(std::string&& value);
  void set_video_url(const char* value);
  void set_video_url(const char* value, size_t size);
  std::string* mutable_video_url();
  std::string* release_video_url();
  void set_allocated_video_url(std::string* video_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_video_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_video_url(
      std::string* video_url);
  private:
  const std::string& _internal_video_url() const;
  void _internal_set_video_url(const std::string& value);
  std::string* _internal_mutable_video_url();
  public:

  // bytes snapshot = 7;
  void clear_snapshot();
  const std::string& snapshot() const;
  void set_snapshot(const std::string& value);
  void set_snapshot(std::string&& value);
  void set_snapshot(const char* value);
  void set_snapshot(const void* value, size_t size);
  std::string* mutable_snapshot();
  std::string* release_snapshot();
  void set_allocated_snapshot(std::string* snapshot);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_snapshot();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_snapshot(
      std::string* snapshot);
  private:
  const std::string& _internal_snapshot() const;
  void _internal_set_snapshot(const std::string& value);
  std::string* _internal_mutable_snapshot();
  public:

  // int64 start_time = 3;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end_time = 4;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .novumind.goku.proto.storage.Task.StatusCode status_code = 5;
  void clear_status_code();
  ::novumind::goku::proto::storage::Task_StatusCode status_code() const;
  void set_status_code(::novumind::goku::proto::storage::Task_StatusCode value);
  private:
  ::novumind::goku::proto::storage::Task_StatusCode _internal_status_code() const;
  void _internal_set_status_code(::novumind::goku::proto::storage::Task_StatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:novumind.goku.proto.storage.Task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> model_group_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshot_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_;
  int status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class Box PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:novumind.goku.proto.storage.Box) */ {
 public:
  inline Box() : Box(nullptr) {};
  virtual ~Box();

  Box(const Box& from);
  Box(Box&& from) noexcept
    : Box() {
    *this = ::std::move(from);
  }

  inline Box& operator=(const Box& from) {
    CopyFrom(from);
    return *this;
  }
  inline Box& operator=(Box&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Box& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Box* internal_default_instance() {
    return reinterpret_cast<const Box*>(
               &_Box_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Box& a, Box& b) {
    a.Swap(&b);
  }
  inline void Swap(Box* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Box* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Box* New() const final {
    return CreateMaybeMessage<Box>(nullptr);
  }

  Box* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Box>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Box& from);
  void MergeFrom(const Box& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Box* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "novumind.goku.proto.storage.Box";
  }
  protected:
  explicit Box(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 width = 3;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 4;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:novumind.goku.proto.storage.Box)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class Detail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:novumind.goku.proto.storage.Detail) */ {
 public:
  inline Detail() : Detail(nullptr) {};
  virtual ~Detail();

  Detail(const Detail& from);
  Detail(Detail&& from) noexcept
    : Detail() {
    *this = ::std::move(from);
  }

  inline Detail& operator=(const Detail& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detail& operator=(Detail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Detail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Detail* internal_default_instance() {
    return reinterpret_cast<const Detail*>(
               &_Detail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Detail& a, Detail& b) {
    a.Swap(&b);
  }
  inline void Swap(Detail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Detail* New() const final {
    return CreateMaybeMessage<Detail>(nullptr);
  }

  Detail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Detail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Detail& from);
  void MergeFrom(const Detail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "novumind.goku.proto.storage.Detail";
  }
  protected:
  explicit Detail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassFieldNumber = 1,
    kConfidenceFieldNumber = 2,
    kIdFieldNumber = 4,
    kBboxFieldNumber = 3,
    kObjScoreFieldNumber = 5,
  };
  // repeated string class = 1;
  int class__size() const;
  private:
  int _internal_class__size() const;
  public:
  void clear_class_();
  const std::string& class_(int index) const;
  std::string* mutable_class_(int index);
  void set_class_(int index, const std::string& value);
  void set_class_(int index, std::string&& value);
  void set_class_(int index, const char* value);
  void set_class_(int index, const char* value, size_t size);
  std::string* add_class_();
  void add_class_(const std::string& value);
  void add_class_(std::string&& value);
  void add_class_(const char* value);
  void add_class_(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& class_() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_class_();
  private:
  const std::string& _internal_class_(int index) const;
  std::string* _internal_add_class_();
  public:

  // repeated float confidence = 2;
  int confidence_size() const;
  private:
  int _internal_confidence_size() const;
  public:
  void clear_confidence();
  private:
  float _internal_confidence(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_confidence() const;
  void _internal_add_confidence(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_confidence();
  public:
  float confidence(int index) const;
  void set_confidence(int index, float value);
  void add_confidence(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      confidence() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_confidence();

  // string id = 4;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .novumind.goku.proto.storage.Box bbox = 3;
  bool has_bbox() const;
  private:
  bool _internal_has_bbox() const;
  public:
  void clear_bbox();
  const ::novumind::goku::proto::storage::Box& bbox() const;
  ::novumind::goku::proto::storage::Box* release_bbox();
  ::novumind::goku::proto::storage::Box* mutable_bbox();
  void set_allocated_bbox(::novumind::goku::proto::storage::Box* bbox);
  private:
  const ::novumind::goku::proto::storage::Box& _internal_bbox() const;
  ::novumind::goku::proto::storage::Box* _internal_mutable_bbox();
  public:
  void unsafe_arena_set_allocated_bbox(
      ::novumind::goku::proto::storage::Box* bbox);
  ::novumind::goku::proto::storage::Box* unsafe_arena_release_bbox();

  // float obj_score = 5;
  void clear_obj_score();
  float obj_score() const;
  void set_obj_score(float value);
  private:
  float _internal_obj_score() const;
  void _internal_set_obj_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:novumind.goku.proto.storage.Detail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> class__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > confidence_;
  mutable std::atomic<int> _confidence_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::novumind::goku::proto::storage::Box* bbox_;
  float obj_score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class FrameMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:novumind.goku.proto.storage.FrameMetadata) */ {
 public:
  inline FrameMetadata() : FrameMetadata(nullptr) {};
  virtual ~FrameMetadata();

  FrameMetadata(const FrameMetadata& from);
  FrameMetadata(FrameMetadata&& from) noexcept
    : FrameMetadata() {
    *this = ::std::move(from);
  }

  inline FrameMetadata& operator=(const FrameMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameMetadata& operator=(FrameMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameMetadata* internal_default_instance() {
    return reinterpret_cast<const FrameMetadata*>(
               &_FrameMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FrameMetadata& a, FrameMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameMetadata* New() const final {
    return CreateMaybeMessage<FrameMetadata>(nullptr);
  }

  FrameMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameMetadata& from);
  void MergeFrom(const FrameMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "novumind.goku.proto.storage.FrameMetadata";
  }
  protected:
  explicit FrameMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 2,
    kModelIdFieldNumber = 3,
    kFrameNumFieldNumber = 1,
  };
  // repeated .novumind.goku.proto.storage.Detail details = 2;
  int details_size() const;
  private:
  int _internal_details_size() const;
  public:
  void clear_details();
  ::novumind::goku::proto::storage::Detail* mutable_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::storage::Detail >*
      mutable_details();
  private:
  const ::novumind::goku::proto::storage::Detail& _internal_details(int index) const;
  ::novumind::goku::proto::storage::Detail* _internal_add_details();
  public:
  const ::novumind::goku::proto::storage::Detail& details(int index) const;
  ::novumind::goku::proto::storage::Detail* add_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::storage::Detail >&
      details() const;

  // string model_id = 3;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_model_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_model_id(
      std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // int64 frame_num = 1;
  void clear_frame_num();
  ::PROTOBUF_NAMESPACE_ID::int64 frame_num() const;
  void set_frame_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_frame_num() const;
  void _internal_set_frame_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:novumind.goku.proto.storage.FrameMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::storage::Detail > details_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 frame_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class ModelOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:novumind.goku.proto.storage.ModelOutput) */ {
 public:
  inline ModelOutput() : ModelOutput(nullptr) {};
  virtual ~ModelOutput();

  ModelOutput(const ModelOutput& from);
  ModelOutput(ModelOutput&& from) noexcept
    : ModelOutput() {
    *this = ::std::move(from);
  }

  inline ModelOutput& operator=(const ModelOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelOutput& operator=(ModelOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelOutput* internal_default_instance() {
    return reinterpret_cast<const ModelOutput*>(
               &_ModelOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ModelOutput& a, ModelOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelOutput* New() const final {
    return CreateMaybeMessage<ModelOutput>(nullptr);
  }

  ModelOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelOutput& from);
  void MergeFrom(const ModelOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "novumind.goku.proto.storage.ModelOutput";
  }
  protected:
  explicit ModelOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadatasFieldNumber = 1,
    kExampleInfoFieldNumber = 2,
  };
  // repeated .novumind.goku.proto.storage.FrameMetadata metadatas = 1;
  int metadatas_size() const;
  private:
  int _internal_metadatas_size() const;
  public:
  void clear_metadatas();
  ::novumind::goku::proto::storage::FrameMetadata* mutable_metadatas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::storage::FrameMetadata >*
      mutable_metadatas();
  private:
  const ::novumind::goku::proto::storage::FrameMetadata& _internal_metadatas(int index) const;
  ::novumind::goku::proto::storage::FrameMetadata* _internal_add_metadatas();
  public:
  const ::novumind::goku::proto::storage::FrameMetadata& metadatas(int index) const;
  ::novumind::goku::proto::storage::FrameMetadata* add_metadatas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::storage::FrameMetadata >&
      metadatas() const;

  // .novumind.goku.proto.storage.ExampleInfo example_info = 2;
  bool has_example_info() const;
  private:
  bool _internal_has_example_info() const;
  public:
  void clear_example_info();
  const ::novumind::goku::proto::storage::ExampleInfo& example_info() const;
  ::novumind::goku::proto::storage::ExampleInfo* release_example_info();
  ::novumind::goku::proto::storage::ExampleInfo* mutable_example_info();
  void set_allocated_example_info(::novumind::goku::proto::storage::ExampleInfo* example_info);
  private:
  const ::novumind::goku::proto::storage::ExampleInfo& _internal_example_info() const;
  ::novumind::goku::proto::storage::ExampleInfo* _internal_mutable_example_info();
  public:
  void unsafe_arena_set_allocated_example_info(
      ::novumind::goku::proto::storage::ExampleInfo* example_info);
  ::novumind::goku::proto::storage::ExampleInfo* unsafe_arena_release_example_info();

  // @@protoc_insertion_point(class_scope:novumind.goku.proto.storage.ModelOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::storage::FrameMetadata > metadatas_;
  ::novumind::goku::proto::storage::ExampleInfo* example_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class Loader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:novumind.goku.proto.storage.Loader) */ {
 public:
  inline Loader() : Loader(nullptr) {};
  virtual ~Loader();

  Loader(const Loader& from);
  Loader(Loader&& from) noexcept
    : Loader() {
    *this = ::std::move(from);
  }

  inline Loader& operator=(const Loader& from) {
    CopyFrom(from);
    return *this;
  }
  inline Loader& operator=(Loader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Loader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Loader* internal_default_instance() {
    return reinterpret_cast<const Loader*>(
               &_Loader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Loader& a, Loader& b) {
    a.Swap(&b);
  }
  inline void Swap(Loader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Loader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Loader* New() const final {
    return CreateMaybeMessage<Loader>(nullptr);
  }

  Loader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Loader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Loader& from);
  void MergeFrom(const Loader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Loader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "novumind.goku.proto.storage.Loader";
  }
  protected:
  explicit Loader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaffeLoaderFieldNumber = 1,
    kTfLoaderFieldNumber = 2,
  };
  // .novumind.goku.proto.storage.CaffeLoader caffe_loader = 1;
  bool has_caffe_loader() const;
  private:
  bool _internal_has_caffe_loader() const;
  public:
  void clear_caffe_loader();
  const ::novumind::goku::proto::storage::CaffeLoader& caffe_loader() const;
  ::novumind::goku::proto::storage::CaffeLoader* release_caffe_loader();
  ::novumind::goku::proto::storage::CaffeLoader* mutable_caffe_loader();
  void set_allocated_caffe_loader(::novumind::goku::proto::storage::CaffeLoader* caffe_loader);
  private:
  const ::novumind::goku::proto::storage::CaffeLoader& _internal_caffe_loader() const;
  ::novumind::goku::proto::storage::CaffeLoader* _internal_mutable_caffe_loader();
  public:
  void unsafe_arena_set_allocated_caffe_loader(
      ::novumind::goku::proto::storage::CaffeLoader* caffe_loader);
  ::novumind::goku::proto::storage::CaffeLoader* unsafe_arena_release_caffe_loader();

  // .novumind.goku.proto.storage.TensorLoader tf_loader = 2;
  bool has_tf_loader() const;
  private:
  bool _internal_has_tf_loader() const;
  public:
  void clear_tf_loader();
  const ::novumind::goku::proto::storage::TensorLoader& tf_loader() const;
  ::novumind::goku::proto::storage::TensorLoader* release_tf_loader();
  ::novumind::goku::proto::storage::TensorLoader* mutable_tf_loader();
  void set_allocated_tf_loader(::novumind::goku::proto::storage::TensorLoader* tf_loader);
  private:
  const ::novumind::goku::proto::storage::TensorLoader& _internal_tf_loader() const;
  ::novumind::goku::proto::storage::TensorLoader* _internal_mutable_tf_loader();
  public:
  void unsafe_arena_set_allocated_tf_loader(
      ::novumind::goku::proto::storage::TensorLoader* tf_loader);
  ::novumind::goku::proto::storage::TensorLoader* unsafe_arena_release_tf_loader();

  // @@protoc_insertion_point(class_scope:novumind.goku.proto.storage.Loader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::novumind::goku::proto::storage::CaffeLoader* caffe_loader_;
  ::novumind::goku::proto::storage::TensorLoader* tf_loader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class Model PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:novumind.goku.proto.storage.Model) */ {
 public:
  inline Model() : Model(nullptr) {};
  virtual ~Model();

  Model(const Model& from);
  Model(Model&& from) noexcept
    : Model() {
    *this = ::std::move(from);
  }

  inline Model& operator=(const Model& from) {
    CopyFrom(from);
    return *this;
  }
  inline Model& operator=(Model&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Model& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Model* internal_default_instance() {
    return reinterpret_cast<const Model*>(
               &_Model_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Model& a, Model& b) {
    a.Swap(&b);
  }
  inline void Swap(Model* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Model* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Model* New() const final {
    return CreateMaybeMessage<Model>(nullptr);
  }

  Model* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Model>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Model& from);
  void MergeFrom(const Model& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Model* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "novumind.goku.proto.storage.Model";
  }
  protected:
  explicit Model(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 4,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kLoaderFieldNumber = 3,
    kModelParamFieldNumber = 5,
  };
  // repeated string tags = 4;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .novumind.goku.proto.storage.Loader loader = 3;
  bool has_loader() const;
  private:
  bool _internal_has_loader() const;
  public:
  void clear_loader();
  const ::novumind::goku::proto::storage::Loader& loader() const;
  ::novumind::goku::proto::storage::Loader* release_loader();
  ::novumind::goku::proto::storage::Loader* mutable_loader();
  void set_allocated_loader(::novumind::goku::proto::storage::Loader* loader);
  private:
  const ::novumind::goku::proto::storage::Loader& _internal_loader() const;
  ::novumind::goku::proto::storage::Loader* _internal_mutable_loader();
  public:
  void unsafe_arena_set_allocated_loader(
      ::novumind::goku::proto::storage::Loader* loader);
  ::novumind::goku::proto::storage::Loader* unsafe_arena_release_loader();

  // .novumind.goku.proto.storage.ModelParam model_param = 5;
  bool has_model_param() const;
  private:
  bool _internal_has_model_param() const;
  public:
  void clear_model_param();
  const ::novumind::goku::proto::storage::ModelParam& model_param() const;
  ::novumind::goku::proto::storage::ModelParam* release_model_param();
  ::novumind::goku::proto::storage::ModelParam* mutable_model_param();
  void set_allocated_model_param(::novumind::goku::proto::storage::ModelParam* model_param);
  private:
  const ::novumind::goku::proto::storage::ModelParam& _internal_model_param() const;
  ::novumind::goku::proto::storage::ModelParam* _internal_mutable_model_param();
  public:
  void unsafe_arena_set_allocated_model_param(
      ::novumind::goku::proto::storage::ModelParam* model_param);
  ::novumind::goku::proto::storage::ModelParam* unsafe_arena_release_model_param();

  // @@protoc_insertion_point(class_scope:novumind.goku.proto.storage.Model)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::novumind::goku::proto::storage::Loader* loader_;
  ::novumind::goku::proto::storage::ModelParam* model_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class ImageSize PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:novumind.goku.proto.storage.ImageSize) */ {
 public:
  inline ImageSize() : ImageSize(nullptr) {};
  virtual ~ImageSize();

  ImageSize(const ImageSize& from);
  ImageSize(ImageSize&& from) noexcept
    : ImageSize() {
    *this = ::std::move(from);
  }

  inline ImageSize& operator=(const ImageSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageSize& operator=(ImageSize&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageSize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageSize* internal_default_instance() {
    return reinterpret_cast<const ImageSize*>(
               &_ImageSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ImageSize& a, ImageSize& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageSize* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageSize* New() const final {
    return CreateMaybeMessage<ImageSize>(nullptr);
  }

  ImageSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageSize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageSize& from);
  void MergeFrom(const ImageSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "novumind.goku.proto.storage.ImageSize";
  }
  protected:
  explicit ImageSize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kChannelsFieldNumber = 3,
  };
  // int32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channels = 3;
  void clear_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 channels() const;
  void set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channels() const;
  void _internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:novumind.goku.proto.storage.ImageSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 channels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class CaffeLoader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:novumind.goku.proto.storage.CaffeLoader) */ {
 public:
  inline CaffeLoader() : CaffeLoader(nullptr) {};
  virtual ~CaffeLoader();

  CaffeLoader(const CaffeLoader& from);
  CaffeLoader(CaffeLoader&& from) noexcept
    : CaffeLoader() {
    *this = ::std::move(from);
  }

  inline CaffeLoader& operator=(const CaffeLoader& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaffeLoader& operator=(CaffeLoader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CaffeLoader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CaffeLoader* internal_default_instance() {
    return reinterpret_cast<const CaffeLoader*>(
               &_CaffeLoader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CaffeLoader& a, CaffeLoader& b) {
    a.Swap(&b);
  }
  inline void Swap(CaffeLoader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaffeLoader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CaffeLoader* New() const final {
    return CreateMaybeMessage<CaffeLoader>(nullptr);
  }

  CaffeLoader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CaffeLoader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CaffeLoader& from);
  void MergeFrom(const CaffeLoader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaffeLoader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "novumind.goku.proto.storage.CaffeLoader";
  }
  protected:
  explicit CaffeLoader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtherParamsFieldNumber = 8,
    kModelDefFieldNumber = 1,
    kPretrainedModelFieldNumber = 2,
    kMeanFileFieldNumber = 4,
    kLabelTextFieldNumber = 7,
    kImageSizeFieldNumber = 3,
    kInputScaleFieldNumber = 5,
    kRawScaleFieldNumber = 6,
  };
  // repeated string other_params = 8;
  int other_params_size() const;
  private:
  int _internal_other_params_size() const;
  public:
  void clear_other_params();
  const std::string& other_params(int index) const;
  std::string* mutable_other_params(int index);
  void set_other_params(int index, const std::string& value);
  void set_other_params(int index, std::string&& value);
  void set_other_params(int index, const char* value);
  void set_other_params(int index, const char* value, size_t size);
  std::string* add_other_params();
  void add_other_params(const std::string& value);
  void add_other_params(std::string&& value);
  void add_other_params(const char* value);
  void add_other_params(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& other_params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_other_params();
  private:
  const std::string& _internal_other_params(int index) const;
  std::string* _internal_add_other_params();
  public:

  // string model_def = 1;
  void clear_model_def();
  const std::string& model_def() const;
  void set_model_def(const std::string& value);
  void set_model_def(std::string&& value);
  void set_model_def(const char* value);
  void set_model_def(const char* value, size_t size);
  std::string* mutable_model_def();
  std::string* release_model_def();
  void set_allocated_model_def(std::string* model_def);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_model_def();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_model_def(
      std::string* model_def);
  private:
  const std::string& _internal_model_def() const;
  void _internal_set_model_def(const std::string& value);
  std::string* _internal_mutable_model_def();
  public:

  // string pretrained_model = 2;
  void clear_pretrained_model();
  const std::string& pretrained_model() const;
  void set_pretrained_model(const std::string& value);
  void set_pretrained_model(std::string&& value);
  void set_pretrained_model(const char* value);
  void set_pretrained_model(const char* value, size_t size);
  std::string* mutable_pretrained_model();
  std::string* release_pretrained_model();
  void set_allocated_pretrained_model(std::string* pretrained_model);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pretrained_model();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pretrained_model(
      std::string* pretrained_model);
  private:
  const std::string& _internal_pretrained_model() const;
  void _internal_set_pretrained_model(const std::string& value);
  std::string* _internal_mutable_pretrained_model();
  public:

  // string mean_file = 4;
  void clear_mean_file();
  const std::string& mean_file() const;
  void set_mean_file(const std::string& value);
  void set_mean_file(std::string&& value);
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  std::string* mutable_mean_file();
  std::string* release_mean_file();
  void set_allocated_mean_file(std::string* mean_file);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mean_file();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mean_file(
      std::string* mean_file);
  private:
  const std::string& _internal_mean_file() const;
  void _internal_set_mean_file(const std::string& value);
  std::string* _internal_mutable_mean_file();
  public:

  // string label_text = 7;
  void clear_label_text();
  const std::string& label_text() const;
  void set_label_text(const std::string& value);
  void set_label_text(std::string&& value);
  void set_label_text(const char* value);
  void set_label_text(const char* value, size_t size);
  std::string* mutable_label_text();
  std::string* release_label_text();
  void set_allocated_label_text(std::string* label_text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_label_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_label_text(
      std::string* label_text);
  private:
  const std::string& _internal_label_text() const;
  void _internal_set_label_text(const std::string& value);
  std::string* _internal_mutable_label_text();
  public:

  // .novumind.goku.proto.storage.ImageSize image_size = 3;
  bool has_image_size() const;
  private:
  bool _internal_has_image_size() const;
  public:
  void clear_image_size();
  const ::novumind::goku::proto::storage::ImageSize& image_size() const;
  ::novumind::goku::proto::storage::ImageSize* release_image_size();
  ::novumind::goku::proto::storage::ImageSize* mutable_image_size();
  void set_allocated_image_size(::novumind::goku::proto::storage::ImageSize* image_size);
  private:
  const ::novumind::goku::proto::storage::ImageSize& _internal_image_size() const;
  ::novumind::goku::proto::storage::ImageSize* _internal_mutable_image_size();
  public:
  void unsafe_arena_set_allocated_image_size(
      ::novumind::goku::proto::storage::ImageSize* image_size);
  ::novumind::goku::proto::storage::ImageSize* unsafe_arena_release_image_size();

  // double input_scale = 5;
  void clear_input_scale();
  double input_scale() const;
  void set_input_scale(double value);
  private:
  double _internal_input_scale() const;
  void _internal_set_input_scale(double value);
  public:

  // double raw_scale = 6;
  void clear_raw_scale();
  double raw_scale() const;
  void set_raw_scale(double value);
  private:
  double _internal_raw_scale() const;
  void _internal_set_raw_scale(double value);
  public:

  // @@protoc_insertion_point(class_scope:novumind.goku.proto.storage.CaffeLoader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> other_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_def_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pretrained_model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mean_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_text_;
  ::novumind::goku::proto::storage::ImageSize* image_size_;
  double input_scale_;
  double raw_scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class TensorLoader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:novumind.goku.proto.storage.TensorLoader) */ {
 public:
  inline TensorLoader() : TensorLoader(nullptr) {};
  virtual ~TensorLoader();

  TensorLoader(const TensorLoader& from);
  TensorLoader(TensorLoader&& from) noexcept
    : TensorLoader() {
    *this = ::std::move(from);
  }

  inline TensorLoader& operator=(const TensorLoader& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorLoader& operator=(TensorLoader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorLoader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorLoader* internal_default_instance() {
    return reinterpret_cast<const TensorLoader*>(
               &_TensorLoader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TensorLoader& a, TensorLoader& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorLoader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorLoader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorLoader* New() const final {
    return CreateMaybeMessage<TensorLoader>(nullptr);
  }

  TensorLoader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorLoader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorLoader& from);
  void MergeFrom(const TensorLoader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorLoader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "novumind.goku.proto.storage.TensorLoader";
  }
  protected:
  explicit TensorLoader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtherParamsFieldNumber = 3,
    kCkptPathFieldNumber = 1,
    kImageSizeFieldNumber = 2,
  };
  // repeated string other_params = 3;
  int other_params_size() const;
  private:
  int _internal_other_params_size() const;
  public:
  void clear_other_params();
  const std::string& other_params(int index) const;
  std::string* mutable_other_params(int index);
  void set_other_params(int index, const std::string& value);
  void set_other_params(int index, std::string&& value);
  void set_other_params(int index, const char* value);
  void set_other_params(int index, const char* value, size_t size);
  std::string* add_other_params();
  void add_other_params(const std::string& value);
  void add_other_params(std::string&& value);
  void add_other_params(const char* value);
  void add_other_params(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& other_params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_other_params();
  private:
  const std::string& _internal_other_params(int index) const;
  std::string* _internal_add_other_params();
  public:

  // string ckpt_path = 1;
  void clear_ckpt_path();
  const std::string& ckpt_path() const;
  void set_ckpt_path(const std::string& value);
  void set_ckpt_path(std::string&& value);
  void set_ckpt_path(const char* value);
  void set_ckpt_path(const char* value, size_t size);
  std::string* mutable_ckpt_path();
  std::string* release_ckpt_path();
  void set_allocated_ckpt_path(std::string* ckpt_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ckpt_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ckpt_path(
      std::string* ckpt_path);
  private:
  const std::string& _internal_ckpt_path() const;
  void _internal_set_ckpt_path(const std::string& value);
  std::string* _internal_mutable_ckpt_path();
  public:

  // .novumind.goku.proto.storage.ImageSize image_size = 2;
  bool has_image_size() const;
  private:
  bool _internal_has_image_size() const;
  public:
  void clear_image_size();
  const ::novumind::goku::proto::storage::ImageSize& image_size() const;
  ::novumind::goku::proto::storage::ImageSize* release_image_size();
  ::novumind::goku::proto::storage::ImageSize* mutable_image_size();
  void set_allocated_image_size(::novumind::goku::proto::storage::ImageSize* image_size);
  private:
  const ::novumind::goku::proto::storage::ImageSize& _internal_image_size() const;
  ::novumind::goku::proto::storage::ImageSize* _internal_mutable_image_size();
  public:
  void unsafe_arena_set_allocated_image_size(
      ::novumind::goku::proto::storage::ImageSize* image_size);
  ::novumind::goku::proto::storage::ImageSize* unsafe_arena_release_image_size();

  // @@protoc_insertion_point(class_scope:novumind.goku.proto.storage.TensorLoader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> other_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ckpt_path_;
  ::novumind::goku::proto::storage::ImageSize* image_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class ThresholdIdx PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:novumind.goku.proto.storage.ThresholdIdx) */ {
 public:
  inline ThresholdIdx() : ThresholdIdx(nullptr) {};
  virtual ~ThresholdIdx();

  ThresholdIdx(const ThresholdIdx& from);
  ThresholdIdx(ThresholdIdx&& from) noexcept
    : ThresholdIdx() {
    *this = ::std::move(from);
  }

  inline ThresholdIdx& operator=(const ThresholdIdx& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThresholdIdx& operator=(ThresholdIdx&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThresholdIdx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThresholdIdx* internal_default_instance() {
    return reinterpret_cast<const ThresholdIdx*>(
               &_ThresholdIdx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ThresholdIdx& a, ThresholdIdx& b) {
    a.Swap(&b);
  }
  inline void Swap(ThresholdIdx* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThresholdIdx* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThresholdIdx* New() const final {
    return CreateMaybeMessage<ThresholdIdx>(nullptr);
  }

  ThresholdIdx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThresholdIdx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThresholdIdx& from);
  void MergeFrom(const ThresholdIdx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThresholdIdx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "novumind.goku.proto.storage.ThresholdIdx";
  }
  protected:
  explicit ThresholdIdx(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdFieldNumber = 1,
    kIdxFieldNumber = 2,
  };
  // double threshold = 1;
  void clear_threshold();
  double threshold() const;
  void set_threshold(double value);
  private:
  double _internal_threshold() const;
  void _internal_set_threshold(double value);
  public:

  // int32 idx = 2;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:novumind.goku.proto.storage.ThresholdIdx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double threshold_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class ModelParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:novumind.goku.proto.storage.ModelParam) */ {
 public:
  inline ModelParam() : ModelParam(nullptr) {};
  virtual ~ModelParam();

  ModelParam(const ModelParam& from);
  ModelParam(ModelParam&& from) noexcept
    : ModelParam() {
    *this = ::std::move(from);
  }

  inline ModelParam& operator=(const ModelParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelParam& operator=(ModelParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelParam* internal_default_instance() {
    return reinterpret_cast<const ModelParam*>(
               &_ModelParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ModelParam& a, ModelParam& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelParam* New() const final {
    return CreateMaybeMessage<ModelParam>(nullptr);
  }

  ModelParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelParam& from);
  void MergeFrom(const ModelParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "novumind.goku.proto.storage.ModelParam";
  }
  protected:
  explicit ModelParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdIdxFieldNumber = 6,
    kNovuModelFileFieldNumber = 1,
    kCaffeModelFileFieldNumber = 2,
    kCaffeTrainedFileFieldNumber = 3,
    kMeanFileFieldNumber = 4,
    kLabelFileFieldNumber = 5,
    kStddevFieldNumber = 7,
    kBaseSizeFieldNumber = 8,
    kTopKFieldNumber = 9,
    kIsBgrFieldNumber = 10,
  };
  // repeated .novumind.goku.proto.storage.ThresholdIdx threshold_idx = 6;
  int threshold_idx_size() const;
  private:
  int _internal_threshold_idx_size() const;
  public:
  void clear_threshold_idx();
  ::novumind::goku::proto::storage::ThresholdIdx* mutable_threshold_idx(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::storage::ThresholdIdx >*
      mutable_threshold_idx();
  private:
  const ::novumind::goku::proto::storage::ThresholdIdx& _internal_threshold_idx(int index) const;
  ::novumind::goku::proto::storage::ThresholdIdx* _internal_add_threshold_idx();
  public:
  const ::novumind::goku::proto::storage::ThresholdIdx& threshold_idx(int index) const;
  ::novumind::goku::proto::storage::ThresholdIdx* add_threshold_idx();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::storage::ThresholdIdx >&
      threshold_idx() const;

  // string novu_model_file = 1;
  void clear_novu_model_file();
  const std::string& novu_model_file() const;
  void set_novu_model_file(const std::string& value);
  void set_novu_model_file(std::string&& value);
  void set_novu_model_file(const char* value);
  void set_novu_model_file(const char* value, size_t size);
  std::string* mutable_novu_model_file();
  std::string* release_novu_model_file();
  void set_allocated_novu_model_file(std::string* novu_model_file);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_novu_model_file();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_novu_model_file(
      std::string* novu_model_file);
  private:
  const std::string& _internal_novu_model_file() const;
  void _internal_set_novu_model_file(const std::string& value);
  std::string* _internal_mutable_novu_model_file();
  public:

  // string caffe_model_file = 2;
  void clear_caffe_model_file();
  const std::string& caffe_model_file() const;
  void set_caffe_model_file(const std::string& value);
  void set_caffe_model_file(std::string&& value);
  void set_caffe_model_file(const char* value);
  void set_caffe_model_file(const char* value, size_t size);
  std::string* mutable_caffe_model_file();
  std::string* release_caffe_model_file();
  void set_allocated_caffe_model_file(std::string* caffe_model_file);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_caffe_model_file();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_caffe_model_file(
      std::string* caffe_model_file);
  private:
  const std::string& _internal_caffe_model_file() const;
  void _internal_set_caffe_model_file(const std::string& value);
  std::string* _internal_mutable_caffe_model_file();
  public:

  // string caffe_trained_file = 3;
  void clear_caffe_trained_file();
  const std::string& caffe_trained_file() const;
  void set_caffe_trained_file(const std::string& value);
  void set_caffe_trained_file(std::string&& value);
  void set_caffe_trained_file(const char* value);
  void set_caffe_trained_file(const char* value, size_t size);
  std::string* mutable_caffe_trained_file();
  std::string* release_caffe_trained_file();
  void set_allocated_caffe_trained_file(std::string* caffe_trained_file);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_caffe_trained_file();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_caffe_trained_file(
      std::string* caffe_trained_file);
  private:
  const std::string& _internal_caffe_trained_file() const;
  void _internal_set_caffe_trained_file(const std::string& value);
  std::string* _internal_mutable_caffe_trained_file();
  public:

  // string mean_file = 4;
  void clear_mean_file();
  const std::string& mean_file() const;
  void set_mean_file(const std::string& value);
  void set_mean_file(std::string&& value);
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  std::string* mutable_mean_file();
  std::string* release_mean_file();
  void set_allocated_mean_file(std::string* mean_file);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mean_file();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mean_file(
      std::string* mean_file);
  private:
  const std::string& _internal_mean_file() const;
  void _internal_set_mean_file(const std::string& value);
  std::string* _internal_mutable_mean_file();
  public:

  // string label_file = 5;
  void clear_label_file();
  const std::string& label_file() const;
  void set_label_file(const std::string& value);
  void set_label_file(std::string&& value);
  void set_label_file(const char* value);
  void set_label_file(const char* value, size_t size);
  std::string* mutable_label_file();
  std::string* release_label_file();
  void set_allocated_label_file(std::string* label_file);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_label_file();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_label_file(
      std::string* label_file);
  private:
  const std::string& _internal_label_file() const;
  void _internal_set_label_file(const std::string& value);
  std::string* _internal_mutable_label_file();
  public:

  // float stddev = 7;
  void clear_stddev();
  float stddev() const;
  void set_stddev(float value);
  private:
  float _internal_stddev() const;
  void _internal_set_stddev(float value);
  public:

  // int32 base_size = 8;
  void clear_base_size();
  ::PROTOBUF_NAMESPACE_ID::int32 base_size() const;
  void set_base_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_base_size() const;
  void _internal_set_base_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 top_k = 9;
  void clear_top_k();
  ::PROTOBUF_NAMESPACE_ID::int32 top_k() const;
  void set_top_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_top_k() const;
  void _internal_set_top_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_bgr = 10;
  void clear_is_bgr();
  bool is_bgr() const;
  void set_is_bgr(bool value);
  private:
  bool _internal_is_bgr() const;
  void _internal_set_is_bgr(bool value);
  public:

  // @@protoc_insertion_point(class_scope:novumind.goku.proto.storage.ModelParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::storage::ThresholdIdx > threshold_idx_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr novu_model_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caffe_model_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caffe_trained_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mean_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_file_;
  float stddev_;
  ::PROTOBUF_NAMESPACE_ID::int32 base_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 top_k_;
  bool is_bgr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class ModelGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:novumind.goku.proto.storage.ModelGroup) */ {
 public:
  inline ModelGroup() : ModelGroup(nullptr) {};
  virtual ~ModelGroup();

  ModelGroup(const ModelGroup& from);
  ModelGroup(ModelGroup&& from) noexcept
    : ModelGroup() {
    *this = ::std::move(from);
  }

  inline ModelGroup& operator=(const ModelGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelGroup& operator=(ModelGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelGroup* internal_default_instance() {
    return reinterpret_cast<const ModelGroup*>(
               &_ModelGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ModelGroup& a, ModelGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelGroup* New() const final {
    return CreateMaybeMessage<ModelGroup>(nullptr);
  }

  ModelGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelGroup& from);
  void MergeFrom(const ModelGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "novumind.goku.proto.storage.ModelGroup";
  }
  protected:
  explicit ModelGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdsFieldNumber = 3,
    kIdFieldNumber = 1,
    kTopicNameFieldNumber = 2,
  };
  // repeated string model_ids = 3;
  int model_ids_size() const;
  private:
  int _internal_model_ids_size() const;
  public:
  void clear_model_ids();
  const std::string& model_ids(int index) const;
  std::string* mutable_model_ids(int index);
  void set_model_ids(int index, const std::string& value);
  void set_model_ids(int index, std::string&& value);
  void set_model_ids(int index, const char* value);
  void set_model_ids(int index, const char* value, size_t size);
  std::string* add_model_ids();
  void add_model_ids(const std::string& value);
  void add_model_ids(std::string&& value);
  void add_model_ids(const char* value);
  void add_model_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& model_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_model_ids();
  private:
  const std::string& _internal_model_ids(int index) const;
  std::string* _internal_add_model_ids();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string topic_name = 2;
  void clear_topic_name();
  const std::string& topic_name() const;
  void set_topic_name(const std::string& value);
  void set_topic_name(std::string&& value);
  void set_topic_name(const char* value);
  void set_topic_name(const char* value, size_t size);
  std::string* mutable_topic_name();
  std::string* release_topic_name();
  void set_allocated_topic_name(std::string* topic_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_topic_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topic_name(
      std::string* topic_name);
  private:
  const std::string& _internal_topic_name() const;
  void _internal_set_topic_name(const std::string& value);
  std::string* _internal_mutable_topic_name();
  public:

  // @@protoc_insertion_point(class_scope:novumind.goku.proto.storage.ModelGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> model_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class ExampleInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:novumind.goku.proto.storage.ExampleInfo) */ {
 public:
  inline ExampleInfo() : ExampleInfo(nullptr) {};
  virtual ~ExampleInfo();

  ExampleInfo(const ExampleInfo& from);
  ExampleInfo(ExampleInfo&& from) noexcept
    : ExampleInfo() {
    *this = ::std::move(from);
  }

  inline ExampleInfo& operator=(const ExampleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExampleInfo& operator=(ExampleInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExampleInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExampleInfo* internal_default_instance() {
    return reinterpret_cast<const ExampleInfo*>(
               &_ExampleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ExampleInfo& a, ExampleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ExampleInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExampleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExampleInfo* New() const final {
    return CreateMaybeMessage<ExampleInfo>(nullptr);
  }

  ExampleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExampleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExampleInfo& from);
  void MergeFrom(const ExampleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExampleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "novumind.goku.proto.storage.ExampleInfo";
  }
  protected:
  explicit ExampleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 2,
    kImageFieldNumber = 4,
    kFrameNumFieldNumber = 1,
    kConfidenceFieldNumber = 3,
  };
  // string tag = 2;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tag(
      std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // bytes image = 4;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image(
      std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // int32 frame_num = 1;
  void clear_frame_num();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_num() const;
  void set_frame_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_num() const;
  void _internal_set_frame_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float confidence = 3;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:novumind.goku.proto.storage.ExampleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_num_;
  float confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Task

// string id = 1;
inline void Task::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Task::id() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Task.id)
  return _internal_id();
}
inline void Task::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Task.id)
}
inline std::string* Task::mutable_id() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.Task.id)
  return _internal_mutable_id();
}
inline const std::string& Task::_internal_id() const {
  return id_.Get();
}
inline void Task::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Task::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.storage.Task.id)
}
inline void Task::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.Task.id)
}
inline void Task::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.Task.id)
}
inline std::string* Task::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Task::release_id() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.Task.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Task::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.Task.id)
}
inline std::string* Task::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.storage.Task.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Task::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.Task.id)
}

// string video_url = 2;
inline void Task::clear_video_url() {
  video_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Task::video_url() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Task.video_url)
  return _internal_video_url();
}
inline void Task::set_video_url(const std::string& value) {
  _internal_set_video_url(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Task.video_url)
}
inline std::string* Task::mutable_video_url() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.Task.video_url)
  return _internal_mutable_video_url();
}
inline const std::string& Task::_internal_video_url() const {
  return video_url_.Get();
}
inline void Task::_internal_set_video_url(const std::string& value) {
  
  video_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Task::set_video_url(std::string&& value) {
  
  video_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.storage.Task.video_url)
}
inline void Task::set_video_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  video_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.Task.video_url)
}
inline void Task::set_video_url(const char* value,
    size_t size) {
  
  video_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.Task.video_url)
}
inline std::string* Task::_internal_mutable_video_url() {
  
  return video_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Task::release_video_url() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.Task.video_url)
  return video_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Task::set_allocated_video_url(std::string* video_url) {
  if (video_url != nullptr) {
    
  } else {
    
  }
  video_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), video_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.Task.video_url)
}
inline std::string* Task::unsafe_arena_release_video_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.storage.Task.video_url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return video_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Task::unsafe_arena_set_allocated_video_url(
    std::string* video_url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (video_url != nullptr) {
    
  } else {
    
  }
  video_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      video_url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.Task.video_url)
}

// int64 start_time = 3;
inline void Task::clear_start_time() {
  start_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Task::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Task::start_time() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Task.start_time)
  return _internal_start_time();
}
inline void Task::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_time_ = value;
}
inline void Task::set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Task.start_time)
}

// int64 end_time = 4;
inline void Task::clear_end_time() {
  end_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Task::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Task::end_time() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Task.end_time)
  return _internal_end_time();
}
inline void Task::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_time_ = value;
}
inline void Task::set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Task.end_time)
}

// .novumind.goku.proto.storage.Task.StatusCode status_code = 5;
inline void Task::clear_status_code() {
  status_code_ = 0;
}
inline ::novumind::goku::proto::storage::Task_StatusCode Task::_internal_status_code() const {
  return static_cast< ::novumind::goku::proto::storage::Task_StatusCode >(status_code_);
}
inline ::novumind::goku::proto::storage::Task_StatusCode Task::status_code() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Task.status_code)
  return _internal_status_code();
}
inline void Task::_internal_set_status_code(::novumind::goku::proto::storage::Task_StatusCode value) {
  
  status_code_ = value;
}
inline void Task::set_status_code(::novumind::goku::proto::storage::Task_StatusCode value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Task.status_code)
}

// repeated string model_group_ids = 6;
inline int Task::_internal_model_group_ids_size() const {
  return model_group_ids_.size();
}
inline int Task::model_group_ids_size() const {
  return _internal_model_group_ids_size();
}
inline void Task::clear_model_group_ids() {
  model_group_ids_.Clear();
}
inline std::string* Task::add_model_group_ids() {
  // @@protoc_insertion_point(field_add_mutable:novumind.goku.proto.storage.Task.model_group_ids)
  return _internal_add_model_group_ids();
}
inline const std::string& Task::_internal_model_group_ids(int index) const {
  return model_group_ids_.Get(index);
}
inline const std::string& Task::model_group_ids(int index) const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Task.model_group_ids)
  return _internal_model_group_ids(index);
}
inline std::string* Task::mutable_model_group_ids(int index) {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.Task.model_group_ids)
  return model_group_ids_.Mutable(index);
}
inline void Task::set_model_group_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Task.model_group_ids)
  model_group_ids_.Mutable(index)->assign(value);
}
inline void Task::set_model_group_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Task.model_group_ids)
  model_group_ids_.Mutable(index)->assign(std::move(value));
}
inline void Task::set_model_group_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  model_group_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.Task.model_group_ids)
}
inline void Task::set_model_group_ids(int index, const char* value, size_t size) {
  model_group_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.Task.model_group_ids)
}
inline std::string* Task::_internal_add_model_group_ids() {
  return model_group_ids_.Add();
}
inline void Task::add_model_group_ids(const std::string& value) {
  model_group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:novumind.goku.proto.storage.Task.model_group_ids)
}
inline void Task::add_model_group_ids(std::string&& value) {
  model_group_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:novumind.goku.proto.storage.Task.model_group_ids)
}
inline void Task::add_model_group_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  model_group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:novumind.goku.proto.storage.Task.model_group_ids)
}
inline void Task::add_model_group_ids(const char* value, size_t size) {
  model_group_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:novumind.goku.proto.storage.Task.model_group_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Task::model_group_ids() const {
  // @@protoc_insertion_point(field_list:novumind.goku.proto.storage.Task.model_group_ids)
  return model_group_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Task::mutable_model_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:novumind.goku.proto.storage.Task.model_group_ids)
  return &model_group_ids_;
}

// bytes snapshot = 7;
inline void Task::clear_snapshot() {
  snapshot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Task::snapshot() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Task.snapshot)
  return _internal_snapshot();
}
inline void Task::set_snapshot(const std::string& value) {
  _internal_set_snapshot(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Task.snapshot)
}
inline std::string* Task::mutable_snapshot() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.Task.snapshot)
  return _internal_mutable_snapshot();
}
inline const std::string& Task::_internal_snapshot() const {
  return snapshot_.Get();
}
inline void Task::_internal_set_snapshot(const std::string& value) {
  
  snapshot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Task::set_snapshot(std::string&& value) {
  
  snapshot_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.storage.Task.snapshot)
}
inline void Task::set_snapshot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snapshot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.Task.snapshot)
}
inline void Task::set_snapshot(const void* value,
    size_t size) {
  
  snapshot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.Task.snapshot)
}
inline std::string* Task::_internal_mutable_snapshot() {
  
  return snapshot_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Task::release_snapshot() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.Task.snapshot)
  return snapshot_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Task::set_allocated_snapshot(std::string* snapshot) {
  if (snapshot != nullptr) {
    
  } else {
    
  }
  snapshot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.Task.snapshot)
}
inline std::string* Task::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.storage.Task.snapshot)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return snapshot_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Task::unsafe_arena_set_allocated_snapshot(
    std::string* snapshot) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (snapshot != nullptr) {
    
  } else {
    
  }
  snapshot_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      snapshot, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.Task.snapshot)
}

// repeated string labels = 8;
inline int Task::_internal_labels_size() const {
  return labels_.size();
}
inline int Task::labels_size() const {
  return _internal_labels_size();
}
inline void Task::clear_labels() {
  labels_.Clear();
}
inline std::string* Task::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:novumind.goku.proto.storage.Task.labels)
  return _internal_add_labels();
}
inline const std::string& Task::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const std::string& Task::labels(int index) const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Task.labels)
  return _internal_labels(index);
}
inline std::string* Task::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.Task.labels)
  return labels_.Mutable(index);
}
inline void Task::set_labels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Task.labels)
  labels_.Mutable(index)->assign(value);
}
inline void Task::set_labels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Task.labels)
  labels_.Mutable(index)->assign(std::move(value));
}
inline void Task::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.Task.labels)
}
inline void Task::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.Task.labels)
}
inline std::string* Task::_internal_add_labels() {
  return labels_.Add();
}
inline void Task::add_labels(const std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:novumind.goku.proto.storage.Task.labels)
}
inline void Task::add_labels(std::string&& value) {
  labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:novumind.goku.proto.storage.Task.labels)
}
inline void Task::add_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:novumind.goku.proto.storage.Task.labels)
}
inline void Task::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:novumind.goku.proto.storage.Task.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Task::labels() const {
  // @@protoc_insertion_point(field_list:novumind.goku.proto.storage.Task.labels)
  return labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Task::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:novumind.goku.proto.storage.Task.labels)
  return &labels_;
}

// -------------------------------------------------------------------

// Box

// int32 x = 1;
inline void Box::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Box::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Box::x() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Box.x)
  return _internal_x();
}
inline void Box::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Box::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Box.x)
}

// int32 y = 2;
inline void Box::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Box::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Box::y() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Box.y)
  return _internal_y();
}
inline void Box::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void Box::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Box.y)
}

// int32 width = 3;
inline void Box::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Box::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Box::width() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Box.width)
  return _internal_width();
}
inline void Box::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void Box::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Box.width)
}

// int32 height = 4;
inline void Box::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Box::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Box::height() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Box.height)
  return _internal_height();
}
inline void Box::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void Box::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Box.height)
}

// -------------------------------------------------------------------

// Detail

// repeated string class = 1;
inline int Detail::_internal_class__size() const {
  return class__.size();
}
inline int Detail::class__size() const {
  return _internal_class__size();
}
inline void Detail::clear_class_() {
  class__.Clear();
}
inline std::string* Detail::add_class_() {
  // @@protoc_insertion_point(field_add_mutable:novumind.goku.proto.storage.Detail.class)
  return _internal_add_class_();
}
inline const std::string& Detail::_internal_class_(int index) const {
  return class__.Get(index);
}
inline const std::string& Detail::class_(int index) const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Detail.class)
  return _internal_class_(index);
}
inline std::string* Detail::mutable_class_(int index) {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.Detail.class)
  return class__.Mutable(index);
}
inline void Detail::set_class_(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Detail.class)
  class__.Mutable(index)->assign(value);
}
inline void Detail::set_class_(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Detail.class)
  class__.Mutable(index)->assign(std::move(value));
}
inline void Detail::set_class_(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  class__.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.Detail.class)
}
inline void Detail::set_class_(int index, const char* value, size_t size) {
  class__.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.Detail.class)
}
inline std::string* Detail::_internal_add_class_() {
  return class__.Add();
}
inline void Detail::add_class_(const std::string& value) {
  class__.Add()->assign(value);
  // @@protoc_insertion_point(field_add:novumind.goku.proto.storage.Detail.class)
}
inline void Detail::add_class_(std::string&& value) {
  class__.Add(std::move(value));
  // @@protoc_insertion_point(field_add:novumind.goku.proto.storage.Detail.class)
}
inline void Detail::add_class_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  class__.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:novumind.goku.proto.storage.Detail.class)
}
inline void Detail::add_class_(const char* value, size_t size) {
  class__.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:novumind.goku.proto.storage.Detail.class)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Detail::class_() const {
  // @@protoc_insertion_point(field_list:novumind.goku.proto.storage.Detail.class)
  return class__;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Detail::mutable_class_() {
  // @@protoc_insertion_point(field_mutable_list:novumind.goku.proto.storage.Detail.class)
  return &class__;
}

// repeated float confidence = 2;
inline int Detail::_internal_confidence_size() const {
  return confidence_.size();
}
inline int Detail::confidence_size() const {
  return _internal_confidence_size();
}
inline void Detail::clear_confidence() {
  confidence_.Clear();
}
inline float Detail::_internal_confidence(int index) const {
  return confidence_.Get(index);
}
inline float Detail::confidence(int index) const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Detail.confidence)
  return _internal_confidence(index);
}
inline void Detail::set_confidence(int index, float value) {
  confidence_.Set(index, value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Detail.confidence)
}
inline void Detail::_internal_add_confidence(float value) {
  confidence_.Add(value);
}
inline void Detail::add_confidence(float value) {
  _internal_add_confidence(value);
  // @@protoc_insertion_point(field_add:novumind.goku.proto.storage.Detail.confidence)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Detail::_internal_confidence() const {
  return confidence_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Detail::confidence() const {
  // @@protoc_insertion_point(field_list:novumind.goku.proto.storage.Detail.confidence)
  return _internal_confidence();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Detail::_internal_mutable_confidence() {
  return &confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Detail::mutable_confidence() {
  // @@protoc_insertion_point(field_mutable_list:novumind.goku.proto.storage.Detail.confidence)
  return _internal_mutable_confidence();
}

// .novumind.goku.proto.storage.Box bbox = 3;
inline bool Detail::_internal_has_bbox() const {
  return this != internal_default_instance() && bbox_ != nullptr;
}
inline bool Detail::has_bbox() const {
  return _internal_has_bbox();
}
inline void Detail::clear_bbox() {
  if (GetArena() == nullptr && bbox_ != nullptr) {
    delete bbox_;
  }
  bbox_ = nullptr;
}
inline const ::novumind::goku::proto::storage::Box& Detail::_internal_bbox() const {
  const ::novumind::goku::proto::storage::Box* p = bbox_;
  return p != nullptr ? *p : *reinterpret_cast<const ::novumind::goku::proto::storage::Box*>(
      &::novumind::goku::proto::storage::_Box_default_instance_);
}
inline const ::novumind::goku::proto::storage::Box& Detail::bbox() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Detail.bbox)
  return _internal_bbox();
}
inline void Detail::unsafe_arena_set_allocated_bbox(
    ::novumind::goku::proto::storage::Box* bbox) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbox_);
  }
  bbox_ = bbox;
  if (bbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.Detail.bbox)
}
inline ::novumind::goku::proto::storage::Box* Detail::release_bbox() {
  auto temp = unsafe_arena_release_bbox();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::novumind::goku::proto::storage::Box* Detail::unsafe_arena_release_bbox() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.Detail.bbox)
  
  ::novumind::goku::proto::storage::Box* temp = bbox_;
  bbox_ = nullptr;
  return temp;
}
inline ::novumind::goku::proto::storage::Box* Detail::_internal_mutable_bbox() {
  
  if (bbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::novumind::goku::proto::storage::Box>(GetArena());
    bbox_ = p;
  }
  return bbox_;
}
inline ::novumind::goku::proto::storage::Box* Detail::mutable_bbox() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.Detail.bbox)
  return _internal_mutable_bbox();
}
inline void Detail::set_allocated_bbox(::novumind::goku::proto::storage::Box* bbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bbox_;
  }
  if (bbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bbox);
    if (message_arena != submessage_arena) {
      bbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox, submessage_arena);
    }
    
  } else {
    
  }
  bbox_ = bbox;
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.Detail.bbox)
}

// string id = 4;
inline void Detail::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Detail::id() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Detail.id)
  return _internal_id();
}
inline void Detail::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Detail.id)
}
inline std::string* Detail::mutable_id() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.Detail.id)
  return _internal_mutable_id();
}
inline const std::string& Detail::_internal_id() const {
  return id_.Get();
}
inline void Detail::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Detail::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.storage.Detail.id)
}
inline void Detail::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.Detail.id)
}
inline void Detail::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.Detail.id)
}
inline std::string* Detail::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Detail::release_id() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.Detail.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Detail::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.Detail.id)
}
inline std::string* Detail::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.storage.Detail.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Detail::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.Detail.id)
}

// float obj_score = 5;
inline void Detail::clear_obj_score() {
  obj_score_ = 0;
}
inline float Detail::_internal_obj_score() const {
  return obj_score_;
}
inline float Detail::obj_score() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Detail.obj_score)
  return _internal_obj_score();
}
inline void Detail::_internal_set_obj_score(float value) {
  
  obj_score_ = value;
}
inline void Detail::set_obj_score(float value) {
  _internal_set_obj_score(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Detail.obj_score)
}

// -------------------------------------------------------------------

// FrameMetadata

// int64 frame_num = 1;
inline void FrameMetadata::clear_frame_num() {
  frame_num_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameMetadata::_internal_frame_num() const {
  return frame_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameMetadata::frame_num() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.FrameMetadata.frame_num)
  return _internal_frame_num();
}
inline void FrameMetadata::_internal_set_frame_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  frame_num_ = value;
}
inline void FrameMetadata::set_frame_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_frame_num(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.FrameMetadata.frame_num)
}

// repeated .novumind.goku.proto.storage.Detail details = 2;
inline int FrameMetadata::_internal_details_size() const {
  return details_.size();
}
inline int FrameMetadata::details_size() const {
  return _internal_details_size();
}
inline void FrameMetadata::clear_details() {
  details_.Clear();
}
inline ::novumind::goku::proto::storage::Detail* FrameMetadata::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.FrameMetadata.details)
  return details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::storage::Detail >*
FrameMetadata::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:novumind.goku.proto.storage.FrameMetadata.details)
  return &details_;
}
inline const ::novumind::goku::proto::storage::Detail& FrameMetadata::_internal_details(int index) const {
  return details_.Get(index);
}
inline const ::novumind::goku::proto::storage::Detail& FrameMetadata::details(int index) const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.FrameMetadata.details)
  return _internal_details(index);
}
inline ::novumind::goku::proto::storage::Detail* FrameMetadata::_internal_add_details() {
  return details_.Add();
}
inline ::novumind::goku::proto::storage::Detail* FrameMetadata::add_details() {
  // @@protoc_insertion_point(field_add:novumind.goku.proto.storage.FrameMetadata.details)
  return _internal_add_details();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::storage::Detail >&
FrameMetadata::details() const {
  // @@protoc_insertion_point(field_list:novumind.goku.proto.storage.FrameMetadata.details)
  return details_;
}

// string model_id = 3;
inline void FrameMetadata::clear_model_id() {
  model_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FrameMetadata::model_id() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.FrameMetadata.model_id)
  return _internal_model_id();
}
inline void FrameMetadata::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.FrameMetadata.model_id)
}
inline std::string* FrameMetadata::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.FrameMetadata.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& FrameMetadata::_internal_model_id() const {
  return model_id_.Get();
}
inline void FrameMetadata::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FrameMetadata::set_model_id(std::string&& value) {
  
  model_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.storage.FrameMetadata.model_id)
}
inline void FrameMetadata::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.FrameMetadata.model_id)
}
inline void FrameMetadata::set_model_id(const char* value,
    size_t size) {
  
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.FrameMetadata.model_id)
}
inline std::string* FrameMetadata::_internal_mutable_model_id() {
  
  return model_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FrameMetadata::release_model_id() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.FrameMetadata.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FrameMetadata::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.FrameMetadata.model_id)
}
inline std::string* FrameMetadata::unsafe_arena_release_model_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.storage.FrameMetadata.model_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return model_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FrameMetadata::unsafe_arena_set_allocated_model_id(
    std::string* model_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      model_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.FrameMetadata.model_id)
}

// -------------------------------------------------------------------

// ModelOutput

// repeated .novumind.goku.proto.storage.FrameMetadata metadatas = 1;
inline int ModelOutput::_internal_metadatas_size() const {
  return metadatas_.size();
}
inline int ModelOutput::metadatas_size() const {
  return _internal_metadatas_size();
}
inline void ModelOutput::clear_metadatas() {
  metadatas_.Clear();
}
inline ::novumind::goku::proto::storage::FrameMetadata* ModelOutput::mutable_metadatas(int index) {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.ModelOutput.metadatas)
  return metadatas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::storage::FrameMetadata >*
ModelOutput::mutable_metadatas() {
  // @@protoc_insertion_point(field_mutable_list:novumind.goku.proto.storage.ModelOutput.metadatas)
  return &metadatas_;
}
inline const ::novumind::goku::proto::storage::FrameMetadata& ModelOutput::_internal_metadatas(int index) const {
  return metadatas_.Get(index);
}
inline const ::novumind::goku::proto::storage::FrameMetadata& ModelOutput::metadatas(int index) const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ModelOutput.metadatas)
  return _internal_metadatas(index);
}
inline ::novumind::goku::proto::storage::FrameMetadata* ModelOutput::_internal_add_metadatas() {
  return metadatas_.Add();
}
inline ::novumind::goku::proto::storage::FrameMetadata* ModelOutput::add_metadatas() {
  // @@protoc_insertion_point(field_add:novumind.goku.proto.storage.ModelOutput.metadatas)
  return _internal_add_metadatas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::storage::FrameMetadata >&
ModelOutput::metadatas() const {
  // @@protoc_insertion_point(field_list:novumind.goku.proto.storage.ModelOutput.metadatas)
  return metadatas_;
}

// .novumind.goku.proto.storage.ExampleInfo example_info = 2;
inline bool ModelOutput::_internal_has_example_info() const {
  return this != internal_default_instance() && example_info_ != nullptr;
}
inline bool ModelOutput::has_example_info() const {
  return _internal_has_example_info();
}
inline void ModelOutput::clear_example_info() {
  if (GetArena() == nullptr && example_info_ != nullptr) {
    delete example_info_;
  }
  example_info_ = nullptr;
}
inline const ::novumind::goku::proto::storage::ExampleInfo& ModelOutput::_internal_example_info() const {
  const ::novumind::goku::proto::storage::ExampleInfo* p = example_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::novumind::goku::proto::storage::ExampleInfo*>(
      &::novumind::goku::proto::storage::_ExampleInfo_default_instance_);
}
inline const ::novumind::goku::proto::storage::ExampleInfo& ModelOutput::example_info() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ModelOutput.example_info)
  return _internal_example_info();
}
inline void ModelOutput::unsafe_arena_set_allocated_example_info(
    ::novumind::goku::proto::storage::ExampleInfo* example_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(example_info_);
  }
  example_info_ = example_info;
  if (example_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.ModelOutput.example_info)
}
inline ::novumind::goku::proto::storage::ExampleInfo* ModelOutput::release_example_info() {
  auto temp = unsafe_arena_release_example_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::novumind::goku::proto::storage::ExampleInfo* ModelOutput::unsafe_arena_release_example_info() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.ModelOutput.example_info)
  
  ::novumind::goku::proto::storage::ExampleInfo* temp = example_info_;
  example_info_ = nullptr;
  return temp;
}
inline ::novumind::goku::proto::storage::ExampleInfo* ModelOutput::_internal_mutable_example_info() {
  
  if (example_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::novumind::goku::proto::storage::ExampleInfo>(GetArena());
    example_info_ = p;
  }
  return example_info_;
}
inline ::novumind::goku::proto::storage::ExampleInfo* ModelOutput::mutable_example_info() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.ModelOutput.example_info)
  return _internal_mutable_example_info();
}
inline void ModelOutput::set_allocated_example_info(::novumind::goku::proto::storage::ExampleInfo* example_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete example_info_;
  }
  if (example_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(example_info);
    if (message_arena != submessage_arena) {
      example_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, example_info, submessage_arena);
    }
    
  } else {
    
  }
  example_info_ = example_info;
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.ModelOutput.example_info)
}

// -------------------------------------------------------------------

// Loader

// .novumind.goku.proto.storage.CaffeLoader caffe_loader = 1;
inline bool Loader::_internal_has_caffe_loader() const {
  return this != internal_default_instance() && caffe_loader_ != nullptr;
}
inline bool Loader::has_caffe_loader() const {
  return _internal_has_caffe_loader();
}
inline void Loader::clear_caffe_loader() {
  if (GetArena() == nullptr && caffe_loader_ != nullptr) {
    delete caffe_loader_;
  }
  caffe_loader_ = nullptr;
}
inline const ::novumind::goku::proto::storage::CaffeLoader& Loader::_internal_caffe_loader() const {
  const ::novumind::goku::proto::storage::CaffeLoader* p = caffe_loader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::novumind::goku::proto::storage::CaffeLoader*>(
      &::novumind::goku::proto::storage::_CaffeLoader_default_instance_);
}
inline const ::novumind::goku::proto::storage::CaffeLoader& Loader::caffe_loader() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Loader.caffe_loader)
  return _internal_caffe_loader();
}
inline void Loader::unsafe_arena_set_allocated_caffe_loader(
    ::novumind::goku::proto::storage::CaffeLoader* caffe_loader) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caffe_loader_);
  }
  caffe_loader_ = caffe_loader;
  if (caffe_loader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.Loader.caffe_loader)
}
inline ::novumind::goku::proto::storage::CaffeLoader* Loader::release_caffe_loader() {
  auto temp = unsafe_arena_release_caffe_loader();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::novumind::goku::proto::storage::CaffeLoader* Loader::unsafe_arena_release_caffe_loader() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.Loader.caffe_loader)
  
  ::novumind::goku::proto::storage::CaffeLoader* temp = caffe_loader_;
  caffe_loader_ = nullptr;
  return temp;
}
inline ::novumind::goku::proto::storage::CaffeLoader* Loader::_internal_mutable_caffe_loader() {
  
  if (caffe_loader_ == nullptr) {
    auto* p = CreateMaybeMessage<::novumind::goku::proto::storage::CaffeLoader>(GetArena());
    caffe_loader_ = p;
  }
  return caffe_loader_;
}
inline ::novumind::goku::proto::storage::CaffeLoader* Loader::mutable_caffe_loader() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.Loader.caffe_loader)
  return _internal_mutable_caffe_loader();
}
inline void Loader::set_allocated_caffe_loader(::novumind::goku::proto::storage::CaffeLoader* caffe_loader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete caffe_loader_;
  }
  if (caffe_loader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(caffe_loader);
    if (message_arena != submessage_arena) {
      caffe_loader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caffe_loader, submessage_arena);
    }
    
  } else {
    
  }
  caffe_loader_ = caffe_loader;
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.Loader.caffe_loader)
}

// .novumind.goku.proto.storage.TensorLoader tf_loader = 2;
inline bool Loader::_internal_has_tf_loader() const {
  return this != internal_default_instance() && tf_loader_ != nullptr;
}
inline bool Loader::has_tf_loader() const {
  return _internal_has_tf_loader();
}
inline void Loader::clear_tf_loader() {
  if (GetArena() == nullptr && tf_loader_ != nullptr) {
    delete tf_loader_;
  }
  tf_loader_ = nullptr;
}
inline const ::novumind::goku::proto::storage::TensorLoader& Loader::_internal_tf_loader() const {
  const ::novumind::goku::proto::storage::TensorLoader* p = tf_loader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::novumind::goku::proto::storage::TensorLoader*>(
      &::novumind::goku::proto::storage::_TensorLoader_default_instance_);
}
inline const ::novumind::goku::proto::storage::TensorLoader& Loader::tf_loader() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Loader.tf_loader)
  return _internal_tf_loader();
}
inline void Loader::unsafe_arena_set_allocated_tf_loader(
    ::novumind::goku::proto::storage::TensorLoader* tf_loader) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tf_loader_);
  }
  tf_loader_ = tf_loader;
  if (tf_loader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.Loader.tf_loader)
}
inline ::novumind::goku::proto::storage::TensorLoader* Loader::release_tf_loader() {
  auto temp = unsafe_arena_release_tf_loader();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::novumind::goku::proto::storage::TensorLoader* Loader::unsafe_arena_release_tf_loader() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.Loader.tf_loader)
  
  ::novumind::goku::proto::storage::TensorLoader* temp = tf_loader_;
  tf_loader_ = nullptr;
  return temp;
}
inline ::novumind::goku::proto::storage::TensorLoader* Loader::_internal_mutable_tf_loader() {
  
  if (tf_loader_ == nullptr) {
    auto* p = CreateMaybeMessage<::novumind::goku::proto::storage::TensorLoader>(GetArena());
    tf_loader_ = p;
  }
  return tf_loader_;
}
inline ::novumind::goku::proto::storage::TensorLoader* Loader::mutable_tf_loader() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.Loader.tf_loader)
  return _internal_mutable_tf_loader();
}
inline void Loader::set_allocated_tf_loader(::novumind::goku::proto::storage::TensorLoader* tf_loader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tf_loader_;
  }
  if (tf_loader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tf_loader);
    if (message_arena != submessage_arena) {
      tf_loader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tf_loader, submessage_arena);
    }
    
  } else {
    
  }
  tf_loader_ = tf_loader;
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.Loader.tf_loader)
}

// -------------------------------------------------------------------

// Model

// string id = 1;
inline void Model::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Model::id() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Model.id)
  return _internal_id();
}
inline void Model::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Model.id)
}
inline std::string* Model::mutable_id() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.Model.id)
  return _internal_mutable_id();
}
inline const std::string& Model::_internal_id() const {
  return id_.Get();
}
inline void Model::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Model::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.storage.Model.id)
}
inline void Model::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.Model.id)
}
inline void Model::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.Model.id)
}
inline std::string* Model::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Model::release_id() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.Model.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Model::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.Model.id)
}
inline std::string* Model::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.storage.Model.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Model::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.Model.id)
}

// string name = 2;
inline void Model::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Model::name() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Model.name)
  return _internal_name();
}
inline void Model::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Model.name)
}
inline std::string* Model::mutable_name() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.Model.name)
  return _internal_mutable_name();
}
inline const std::string& Model::_internal_name() const {
  return name_.Get();
}
inline void Model::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Model::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.storage.Model.name)
}
inline void Model::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.Model.name)
}
inline void Model::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.Model.name)
}
inline std::string* Model::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Model::release_name() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.Model.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Model::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.Model.name)
}
inline std::string* Model::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.storage.Model.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Model::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.Model.name)
}

// .novumind.goku.proto.storage.Loader loader = 3;
inline bool Model::_internal_has_loader() const {
  return this != internal_default_instance() && loader_ != nullptr;
}
inline bool Model::has_loader() const {
  return _internal_has_loader();
}
inline void Model::clear_loader() {
  if (GetArena() == nullptr && loader_ != nullptr) {
    delete loader_;
  }
  loader_ = nullptr;
}
inline const ::novumind::goku::proto::storage::Loader& Model::_internal_loader() const {
  const ::novumind::goku::proto::storage::Loader* p = loader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::novumind::goku::proto::storage::Loader*>(
      &::novumind::goku::proto::storage::_Loader_default_instance_);
}
inline const ::novumind::goku::proto::storage::Loader& Model::loader() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Model.loader)
  return _internal_loader();
}
inline void Model::unsafe_arena_set_allocated_loader(
    ::novumind::goku::proto::storage::Loader* loader) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loader_);
  }
  loader_ = loader;
  if (loader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.Model.loader)
}
inline ::novumind::goku::proto::storage::Loader* Model::release_loader() {
  auto temp = unsafe_arena_release_loader();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::novumind::goku::proto::storage::Loader* Model::unsafe_arena_release_loader() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.Model.loader)
  
  ::novumind::goku::proto::storage::Loader* temp = loader_;
  loader_ = nullptr;
  return temp;
}
inline ::novumind::goku::proto::storage::Loader* Model::_internal_mutable_loader() {
  
  if (loader_ == nullptr) {
    auto* p = CreateMaybeMessage<::novumind::goku::proto::storage::Loader>(GetArena());
    loader_ = p;
  }
  return loader_;
}
inline ::novumind::goku::proto::storage::Loader* Model::mutable_loader() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.Model.loader)
  return _internal_mutable_loader();
}
inline void Model::set_allocated_loader(::novumind::goku::proto::storage::Loader* loader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete loader_;
  }
  if (loader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loader);
    if (message_arena != submessage_arena) {
      loader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loader, submessage_arena);
    }
    
  } else {
    
  }
  loader_ = loader;
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.Model.loader)
}

// repeated string tags = 4;
inline int Model::_internal_tags_size() const {
  return tags_.size();
}
inline int Model::tags_size() const {
  return _internal_tags_size();
}
inline void Model::clear_tags() {
  tags_.Clear();
}
inline std::string* Model::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:novumind.goku.proto.storage.Model.tags)
  return _internal_add_tags();
}
inline const std::string& Model::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& Model::tags(int index) const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Model.tags)
  return _internal_tags(index);
}
inline std::string* Model::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.Model.tags)
  return tags_.Mutable(index);
}
inline void Model::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Model.tags)
  tags_.Mutable(index)->assign(value);
}
inline void Model::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.Model.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void Model::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.Model.tags)
}
inline void Model::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.Model.tags)
}
inline std::string* Model::_internal_add_tags() {
  return tags_.Add();
}
inline void Model::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:novumind.goku.proto.storage.Model.tags)
}
inline void Model::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:novumind.goku.proto.storage.Model.tags)
}
inline void Model::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:novumind.goku.proto.storage.Model.tags)
}
inline void Model::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:novumind.goku.proto.storage.Model.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Model::tags() const {
  // @@protoc_insertion_point(field_list:novumind.goku.proto.storage.Model.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Model::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:novumind.goku.proto.storage.Model.tags)
  return &tags_;
}

// .novumind.goku.proto.storage.ModelParam model_param = 5;
inline bool Model::_internal_has_model_param() const {
  return this != internal_default_instance() && model_param_ != nullptr;
}
inline bool Model::has_model_param() const {
  return _internal_has_model_param();
}
inline void Model::clear_model_param() {
  if (GetArena() == nullptr && model_param_ != nullptr) {
    delete model_param_;
  }
  model_param_ = nullptr;
}
inline const ::novumind::goku::proto::storage::ModelParam& Model::_internal_model_param() const {
  const ::novumind::goku::proto::storage::ModelParam* p = model_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::novumind::goku::proto::storage::ModelParam*>(
      &::novumind::goku::proto::storage::_ModelParam_default_instance_);
}
inline const ::novumind::goku::proto::storage::ModelParam& Model::model_param() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.Model.model_param)
  return _internal_model_param();
}
inline void Model::unsafe_arena_set_allocated_model_param(
    ::novumind::goku::proto::storage::ModelParam* model_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_param_);
  }
  model_param_ = model_param;
  if (model_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.Model.model_param)
}
inline ::novumind::goku::proto::storage::ModelParam* Model::release_model_param() {
  auto temp = unsafe_arena_release_model_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::novumind::goku::proto::storage::ModelParam* Model::unsafe_arena_release_model_param() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.Model.model_param)
  
  ::novumind::goku::proto::storage::ModelParam* temp = model_param_;
  model_param_ = nullptr;
  return temp;
}
inline ::novumind::goku::proto::storage::ModelParam* Model::_internal_mutable_model_param() {
  
  if (model_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::novumind::goku::proto::storage::ModelParam>(GetArena());
    model_param_ = p;
  }
  return model_param_;
}
inline ::novumind::goku::proto::storage::ModelParam* Model::mutable_model_param() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.Model.model_param)
  return _internal_mutable_model_param();
}
inline void Model::set_allocated_model_param(::novumind::goku::proto::storage::ModelParam* model_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete model_param_;
  }
  if (model_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(model_param);
    if (message_arena != submessage_arena) {
      model_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_param, submessage_arena);
    }
    
  } else {
    
  }
  model_param_ = model_param;
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.Model.model_param)
}

// -------------------------------------------------------------------

// ImageSize

// int32 width = 1;
inline void ImageSize::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageSize::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageSize::width() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ImageSize.width)
  return _internal_width();
}
inline void ImageSize::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void ImageSize::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ImageSize.width)
}

// int32 height = 2;
inline void ImageSize::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageSize::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageSize::height() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ImageSize.height)
  return _internal_height();
}
inline void ImageSize::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void ImageSize::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ImageSize.height)
}

// int32 channels = 3;
inline void ImageSize::clear_channels() {
  channels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageSize::_internal_channels() const {
  return channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageSize::channels() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ImageSize.channels)
  return _internal_channels();
}
inline void ImageSize::_internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channels_ = value;
}
inline void ImageSize::set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ImageSize.channels)
}

// -------------------------------------------------------------------

// CaffeLoader

// string model_def = 1;
inline void CaffeLoader::clear_model_def() {
  model_def_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CaffeLoader::model_def() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.CaffeLoader.model_def)
  return _internal_model_def();
}
inline void CaffeLoader::set_model_def(const std::string& value) {
  _internal_set_model_def(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.CaffeLoader.model_def)
}
inline std::string* CaffeLoader::mutable_model_def() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.CaffeLoader.model_def)
  return _internal_mutable_model_def();
}
inline const std::string& CaffeLoader::_internal_model_def() const {
  return model_def_.Get();
}
inline void CaffeLoader::_internal_set_model_def(const std::string& value) {
  
  model_def_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CaffeLoader::set_model_def(std::string&& value) {
  
  model_def_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.storage.CaffeLoader.model_def)
}
inline void CaffeLoader::set_model_def(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_def_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.CaffeLoader.model_def)
}
inline void CaffeLoader::set_model_def(const char* value,
    size_t size) {
  
  model_def_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.CaffeLoader.model_def)
}
inline std::string* CaffeLoader::_internal_mutable_model_def() {
  
  return model_def_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CaffeLoader::release_model_def() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.CaffeLoader.model_def)
  return model_def_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CaffeLoader::set_allocated_model_def(std::string* model_def) {
  if (model_def != nullptr) {
    
  } else {
    
  }
  model_def_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_def,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.CaffeLoader.model_def)
}
inline std::string* CaffeLoader::unsafe_arena_release_model_def() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.storage.CaffeLoader.model_def)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return model_def_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CaffeLoader::unsafe_arena_set_allocated_model_def(
    std::string* model_def) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (model_def != nullptr) {
    
  } else {
    
  }
  model_def_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      model_def, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.CaffeLoader.model_def)
}

// string pretrained_model = 2;
inline void CaffeLoader::clear_pretrained_model() {
  pretrained_model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CaffeLoader::pretrained_model() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.CaffeLoader.pretrained_model)
  return _internal_pretrained_model();
}
inline void CaffeLoader::set_pretrained_model(const std::string& value) {
  _internal_set_pretrained_model(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.CaffeLoader.pretrained_model)
}
inline std::string* CaffeLoader::mutable_pretrained_model() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.CaffeLoader.pretrained_model)
  return _internal_mutable_pretrained_model();
}
inline const std::string& CaffeLoader::_internal_pretrained_model() const {
  return pretrained_model_.Get();
}
inline void CaffeLoader::_internal_set_pretrained_model(const std::string& value) {
  
  pretrained_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CaffeLoader::set_pretrained_model(std::string&& value) {
  
  pretrained_model_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.storage.CaffeLoader.pretrained_model)
}
inline void CaffeLoader::set_pretrained_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pretrained_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.CaffeLoader.pretrained_model)
}
inline void CaffeLoader::set_pretrained_model(const char* value,
    size_t size) {
  
  pretrained_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.CaffeLoader.pretrained_model)
}
inline std::string* CaffeLoader::_internal_mutable_pretrained_model() {
  
  return pretrained_model_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CaffeLoader::release_pretrained_model() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.CaffeLoader.pretrained_model)
  return pretrained_model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CaffeLoader::set_allocated_pretrained_model(std::string* pretrained_model) {
  if (pretrained_model != nullptr) {
    
  } else {
    
  }
  pretrained_model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pretrained_model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.CaffeLoader.pretrained_model)
}
inline std::string* CaffeLoader::unsafe_arena_release_pretrained_model() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.storage.CaffeLoader.pretrained_model)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pretrained_model_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CaffeLoader::unsafe_arena_set_allocated_pretrained_model(
    std::string* pretrained_model) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pretrained_model != nullptr) {
    
  } else {
    
  }
  pretrained_model_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pretrained_model, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.CaffeLoader.pretrained_model)
}

// .novumind.goku.proto.storage.ImageSize image_size = 3;
inline bool CaffeLoader::_internal_has_image_size() const {
  return this != internal_default_instance() && image_size_ != nullptr;
}
inline bool CaffeLoader::has_image_size() const {
  return _internal_has_image_size();
}
inline void CaffeLoader::clear_image_size() {
  if (GetArena() == nullptr && image_size_ != nullptr) {
    delete image_size_;
  }
  image_size_ = nullptr;
}
inline const ::novumind::goku::proto::storage::ImageSize& CaffeLoader::_internal_image_size() const {
  const ::novumind::goku::proto::storage::ImageSize* p = image_size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::novumind::goku::proto::storage::ImageSize*>(
      &::novumind::goku::proto::storage::_ImageSize_default_instance_);
}
inline const ::novumind::goku::proto::storage::ImageSize& CaffeLoader::image_size() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.CaffeLoader.image_size)
  return _internal_image_size();
}
inline void CaffeLoader::unsafe_arena_set_allocated_image_size(
    ::novumind::goku::proto::storage::ImageSize* image_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_size_);
  }
  image_size_ = image_size;
  if (image_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.CaffeLoader.image_size)
}
inline ::novumind::goku::proto::storage::ImageSize* CaffeLoader::release_image_size() {
  auto temp = unsafe_arena_release_image_size();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::novumind::goku::proto::storage::ImageSize* CaffeLoader::unsafe_arena_release_image_size() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.CaffeLoader.image_size)
  
  ::novumind::goku::proto::storage::ImageSize* temp = image_size_;
  image_size_ = nullptr;
  return temp;
}
inline ::novumind::goku::proto::storage::ImageSize* CaffeLoader::_internal_mutable_image_size() {
  
  if (image_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::novumind::goku::proto::storage::ImageSize>(GetArena());
    image_size_ = p;
  }
  return image_size_;
}
inline ::novumind::goku::proto::storage::ImageSize* CaffeLoader::mutable_image_size() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.CaffeLoader.image_size)
  return _internal_mutable_image_size();
}
inline void CaffeLoader::set_allocated_image_size(::novumind::goku::proto::storage::ImageSize* image_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_size_;
  }
  if (image_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image_size);
    if (message_arena != submessage_arena) {
      image_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_size, submessage_arena);
    }
    
  } else {
    
  }
  image_size_ = image_size;
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.CaffeLoader.image_size)
}

// string mean_file = 4;
inline void CaffeLoader::clear_mean_file() {
  mean_file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CaffeLoader::mean_file() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.CaffeLoader.mean_file)
  return _internal_mean_file();
}
inline void CaffeLoader::set_mean_file(const std::string& value) {
  _internal_set_mean_file(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.CaffeLoader.mean_file)
}
inline std::string* CaffeLoader::mutable_mean_file() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.CaffeLoader.mean_file)
  return _internal_mutable_mean_file();
}
inline const std::string& CaffeLoader::_internal_mean_file() const {
  return mean_file_.Get();
}
inline void CaffeLoader::_internal_set_mean_file(const std::string& value) {
  
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CaffeLoader::set_mean_file(std::string&& value) {
  
  mean_file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.storage.CaffeLoader.mean_file)
}
inline void CaffeLoader::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.CaffeLoader.mean_file)
}
inline void CaffeLoader::set_mean_file(const char* value,
    size_t size) {
  
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.CaffeLoader.mean_file)
}
inline std::string* CaffeLoader::_internal_mutable_mean_file() {
  
  return mean_file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CaffeLoader::release_mean_file() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.CaffeLoader.mean_file)
  return mean_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CaffeLoader::set_allocated_mean_file(std::string* mean_file) {
  if (mean_file != nullptr) {
    
  } else {
    
  }
  mean_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mean_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.CaffeLoader.mean_file)
}
inline std::string* CaffeLoader::unsafe_arena_release_mean_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.storage.CaffeLoader.mean_file)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mean_file_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CaffeLoader::unsafe_arena_set_allocated_mean_file(
    std::string* mean_file) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mean_file != nullptr) {
    
  } else {
    
  }
  mean_file_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mean_file, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.CaffeLoader.mean_file)
}

// double input_scale = 5;
inline void CaffeLoader::clear_input_scale() {
  input_scale_ = 0;
}
inline double CaffeLoader::_internal_input_scale() const {
  return input_scale_;
}
inline double CaffeLoader::input_scale() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.CaffeLoader.input_scale)
  return _internal_input_scale();
}
inline void CaffeLoader::_internal_set_input_scale(double value) {
  
  input_scale_ = value;
}
inline void CaffeLoader::set_input_scale(double value) {
  _internal_set_input_scale(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.CaffeLoader.input_scale)
}

// double raw_scale = 6;
inline void CaffeLoader::clear_raw_scale() {
  raw_scale_ = 0;
}
inline double CaffeLoader::_internal_raw_scale() const {
  return raw_scale_;
}
inline double CaffeLoader::raw_scale() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.CaffeLoader.raw_scale)
  return _internal_raw_scale();
}
inline void CaffeLoader::_internal_set_raw_scale(double value) {
  
  raw_scale_ = value;
}
inline void CaffeLoader::set_raw_scale(double value) {
  _internal_set_raw_scale(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.CaffeLoader.raw_scale)
}

// string label_text = 7;
inline void CaffeLoader::clear_label_text() {
  label_text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CaffeLoader::label_text() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.CaffeLoader.label_text)
  return _internal_label_text();
}
inline void CaffeLoader::set_label_text(const std::string& value) {
  _internal_set_label_text(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.CaffeLoader.label_text)
}
inline std::string* CaffeLoader::mutable_label_text() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.CaffeLoader.label_text)
  return _internal_mutable_label_text();
}
inline const std::string& CaffeLoader::_internal_label_text() const {
  return label_text_.Get();
}
inline void CaffeLoader::_internal_set_label_text(const std::string& value) {
  
  label_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CaffeLoader::set_label_text(std::string&& value) {
  
  label_text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.storage.CaffeLoader.label_text)
}
inline void CaffeLoader::set_label_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.CaffeLoader.label_text)
}
inline void CaffeLoader::set_label_text(const char* value,
    size_t size) {
  
  label_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.CaffeLoader.label_text)
}
inline std::string* CaffeLoader::_internal_mutable_label_text() {
  
  return label_text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CaffeLoader::release_label_text() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.CaffeLoader.label_text)
  return label_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CaffeLoader::set_allocated_label_text(std::string* label_text) {
  if (label_text != nullptr) {
    
  } else {
    
  }
  label_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.CaffeLoader.label_text)
}
inline std::string* CaffeLoader::unsafe_arena_release_label_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.storage.CaffeLoader.label_text)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return label_text_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CaffeLoader::unsafe_arena_set_allocated_label_text(
    std::string* label_text) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (label_text != nullptr) {
    
  } else {
    
  }
  label_text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      label_text, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.CaffeLoader.label_text)
}

// repeated string other_params = 8;
inline int CaffeLoader::_internal_other_params_size() const {
  return other_params_.size();
}
inline int CaffeLoader::other_params_size() const {
  return _internal_other_params_size();
}
inline void CaffeLoader::clear_other_params() {
  other_params_.Clear();
}
inline std::string* CaffeLoader::add_other_params() {
  // @@protoc_insertion_point(field_add_mutable:novumind.goku.proto.storage.CaffeLoader.other_params)
  return _internal_add_other_params();
}
inline const std::string& CaffeLoader::_internal_other_params(int index) const {
  return other_params_.Get(index);
}
inline const std::string& CaffeLoader::other_params(int index) const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.CaffeLoader.other_params)
  return _internal_other_params(index);
}
inline std::string* CaffeLoader::mutable_other_params(int index) {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.CaffeLoader.other_params)
  return other_params_.Mutable(index);
}
inline void CaffeLoader::set_other_params(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.CaffeLoader.other_params)
  other_params_.Mutable(index)->assign(value);
}
inline void CaffeLoader::set_other_params(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.CaffeLoader.other_params)
  other_params_.Mutable(index)->assign(std::move(value));
}
inline void CaffeLoader::set_other_params(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  other_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.CaffeLoader.other_params)
}
inline void CaffeLoader::set_other_params(int index, const char* value, size_t size) {
  other_params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.CaffeLoader.other_params)
}
inline std::string* CaffeLoader::_internal_add_other_params() {
  return other_params_.Add();
}
inline void CaffeLoader::add_other_params(const std::string& value) {
  other_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:novumind.goku.proto.storage.CaffeLoader.other_params)
}
inline void CaffeLoader::add_other_params(std::string&& value) {
  other_params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:novumind.goku.proto.storage.CaffeLoader.other_params)
}
inline void CaffeLoader::add_other_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  other_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:novumind.goku.proto.storage.CaffeLoader.other_params)
}
inline void CaffeLoader::add_other_params(const char* value, size_t size) {
  other_params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:novumind.goku.proto.storage.CaffeLoader.other_params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CaffeLoader::other_params() const {
  // @@protoc_insertion_point(field_list:novumind.goku.proto.storage.CaffeLoader.other_params)
  return other_params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CaffeLoader::mutable_other_params() {
  // @@protoc_insertion_point(field_mutable_list:novumind.goku.proto.storage.CaffeLoader.other_params)
  return &other_params_;
}

// -------------------------------------------------------------------

// TensorLoader

// string ckpt_path = 1;
inline void TensorLoader::clear_ckpt_path() {
  ckpt_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TensorLoader::ckpt_path() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.TensorLoader.ckpt_path)
  return _internal_ckpt_path();
}
inline void TensorLoader::set_ckpt_path(const std::string& value) {
  _internal_set_ckpt_path(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.TensorLoader.ckpt_path)
}
inline std::string* TensorLoader::mutable_ckpt_path() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.TensorLoader.ckpt_path)
  return _internal_mutable_ckpt_path();
}
inline const std::string& TensorLoader::_internal_ckpt_path() const {
  return ckpt_path_.Get();
}
inline void TensorLoader::_internal_set_ckpt_path(const std::string& value) {
  
  ckpt_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TensorLoader::set_ckpt_path(std::string&& value) {
  
  ckpt_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.storage.TensorLoader.ckpt_path)
}
inline void TensorLoader::set_ckpt_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ckpt_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.TensorLoader.ckpt_path)
}
inline void TensorLoader::set_ckpt_path(const char* value,
    size_t size) {
  
  ckpt_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.TensorLoader.ckpt_path)
}
inline std::string* TensorLoader::_internal_mutable_ckpt_path() {
  
  return ckpt_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TensorLoader::release_ckpt_path() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.TensorLoader.ckpt_path)
  return ckpt_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TensorLoader::set_allocated_ckpt_path(std::string* ckpt_path) {
  if (ckpt_path != nullptr) {
    
  } else {
    
  }
  ckpt_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ckpt_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.TensorLoader.ckpt_path)
}
inline std::string* TensorLoader::unsafe_arena_release_ckpt_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.storage.TensorLoader.ckpt_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ckpt_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TensorLoader::unsafe_arena_set_allocated_ckpt_path(
    std::string* ckpt_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ckpt_path != nullptr) {
    
  } else {
    
  }
  ckpt_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ckpt_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.TensorLoader.ckpt_path)
}

// .novumind.goku.proto.storage.ImageSize image_size = 2;
inline bool TensorLoader::_internal_has_image_size() const {
  return this != internal_default_instance() && image_size_ != nullptr;
}
inline bool TensorLoader::has_image_size() const {
  return _internal_has_image_size();
}
inline void TensorLoader::clear_image_size() {
  if (GetArena() == nullptr && image_size_ != nullptr) {
    delete image_size_;
  }
  image_size_ = nullptr;
}
inline const ::novumind::goku::proto::storage::ImageSize& TensorLoader::_internal_image_size() const {
  const ::novumind::goku::proto::storage::ImageSize* p = image_size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::novumind::goku::proto::storage::ImageSize*>(
      &::novumind::goku::proto::storage::_ImageSize_default_instance_);
}
inline const ::novumind::goku::proto::storage::ImageSize& TensorLoader::image_size() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.TensorLoader.image_size)
  return _internal_image_size();
}
inline void TensorLoader::unsafe_arena_set_allocated_image_size(
    ::novumind::goku::proto::storage::ImageSize* image_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_size_);
  }
  image_size_ = image_size;
  if (image_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.TensorLoader.image_size)
}
inline ::novumind::goku::proto::storage::ImageSize* TensorLoader::release_image_size() {
  auto temp = unsafe_arena_release_image_size();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::novumind::goku::proto::storage::ImageSize* TensorLoader::unsafe_arena_release_image_size() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.TensorLoader.image_size)
  
  ::novumind::goku::proto::storage::ImageSize* temp = image_size_;
  image_size_ = nullptr;
  return temp;
}
inline ::novumind::goku::proto::storage::ImageSize* TensorLoader::_internal_mutable_image_size() {
  
  if (image_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::novumind::goku::proto::storage::ImageSize>(GetArena());
    image_size_ = p;
  }
  return image_size_;
}
inline ::novumind::goku::proto::storage::ImageSize* TensorLoader::mutable_image_size() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.TensorLoader.image_size)
  return _internal_mutable_image_size();
}
inline void TensorLoader::set_allocated_image_size(::novumind::goku::proto::storage::ImageSize* image_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_size_;
  }
  if (image_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image_size);
    if (message_arena != submessage_arena) {
      image_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_size, submessage_arena);
    }
    
  } else {
    
  }
  image_size_ = image_size;
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.TensorLoader.image_size)
}

// repeated string other_params = 3;
inline int TensorLoader::_internal_other_params_size() const {
  return other_params_.size();
}
inline int TensorLoader::other_params_size() const {
  return _internal_other_params_size();
}
inline void TensorLoader::clear_other_params() {
  other_params_.Clear();
}
inline std::string* TensorLoader::add_other_params() {
  // @@protoc_insertion_point(field_add_mutable:novumind.goku.proto.storage.TensorLoader.other_params)
  return _internal_add_other_params();
}
inline const std::string& TensorLoader::_internal_other_params(int index) const {
  return other_params_.Get(index);
}
inline const std::string& TensorLoader::other_params(int index) const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.TensorLoader.other_params)
  return _internal_other_params(index);
}
inline std::string* TensorLoader::mutable_other_params(int index) {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.TensorLoader.other_params)
  return other_params_.Mutable(index);
}
inline void TensorLoader::set_other_params(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.TensorLoader.other_params)
  other_params_.Mutable(index)->assign(value);
}
inline void TensorLoader::set_other_params(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.TensorLoader.other_params)
  other_params_.Mutable(index)->assign(std::move(value));
}
inline void TensorLoader::set_other_params(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  other_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.TensorLoader.other_params)
}
inline void TensorLoader::set_other_params(int index, const char* value, size_t size) {
  other_params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.TensorLoader.other_params)
}
inline std::string* TensorLoader::_internal_add_other_params() {
  return other_params_.Add();
}
inline void TensorLoader::add_other_params(const std::string& value) {
  other_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:novumind.goku.proto.storage.TensorLoader.other_params)
}
inline void TensorLoader::add_other_params(std::string&& value) {
  other_params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:novumind.goku.proto.storage.TensorLoader.other_params)
}
inline void TensorLoader::add_other_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  other_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:novumind.goku.proto.storage.TensorLoader.other_params)
}
inline void TensorLoader::add_other_params(const char* value, size_t size) {
  other_params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:novumind.goku.proto.storage.TensorLoader.other_params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TensorLoader::other_params() const {
  // @@protoc_insertion_point(field_list:novumind.goku.proto.storage.TensorLoader.other_params)
  return other_params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TensorLoader::mutable_other_params() {
  // @@protoc_insertion_point(field_mutable_list:novumind.goku.proto.storage.TensorLoader.other_params)
  return &other_params_;
}

// -------------------------------------------------------------------

// ThresholdIdx

// double threshold = 1;
inline void ThresholdIdx::clear_threshold() {
  threshold_ = 0;
}
inline double ThresholdIdx::_internal_threshold() const {
  return threshold_;
}
inline double ThresholdIdx::threshold() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ThresholdIdx.threshold)
  return _internal_threshold();
}
inline void ThresholdIdx::_internal_set_threshold(double value) {
  
  threshold_ = value;
}
inline void ThresholdIdx::set_threshold(double value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ThresholdIdx.threshold)
}

// int32 idx = 2;
inline void ThresholdIdx::clear_idx() {
  idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThresholdIdx::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThresholdIdx::idx() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ThresholdIdx.idx)
  return _internal_idx();
}
inline void ThresholdIdx::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idx_ = value;
}
inline void ThresholdIdx::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ThresholdIdx.idx)
}

// -------------------------------------------------------------------

// ModelParam

// string novu_model_file = 1;
inline void ModelParam::clear_novu_model_file() {
  novu_model_file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelParam::novu_model_file() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ModelParam.novu_model_file)
  return _internal_novu_model_file();
}
inline void ModelParam::set_novu_model_file(const std::string& value) {
  _internal_set_novu_model_file(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ModelParam.novu_model_file)
}
inline std::string* ModelParam::mutable_novu_model_file() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.ModelParam.novu_model_file)
  return _internal_mutable_novu_model_file();
}
inline const std::string& ModelParam::_internal_novu_model_file() const {
  return novu_model_file_.Get();
}
inline void ModelParam::_internal_set_novu_model_file(const std::string& value) {
  
  novu_model_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelParam::set_novu_model_file(std::string&& value) {
  
  novu_model_file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.storage.ModelParam.novu_model_file)
}
inline void ModelParam::set_novu_model_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  novu_model_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.ModelParam.novu_model_file)
}
inline void ModelParam::set_novu_model_file(const char* value,
    size_t size) {
  
  novu_model_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.ModelParam.novu_model_file)
}
inline std::string* ModelParam::_internal_mutable_novu_model_file() {
  
  return novu_model_file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelParam::release_novu_model_file() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.ModelParam.novu_model_file)
  return novu_model_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelParam::set_allocated_novu_model_file(std::string* novu_model_file) {
  if (novu_model_file != nullptr) {
    
  } else {
    
  }
  novu_model_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), novu_model_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.ModelParam.novu_model_file)
}
inline std::string* ModelParam::unsafe_arena_release_novu_model_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.storage.ModelParam.novu_model_file)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return novu_model_file_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ModelParam::unsafe_arena_set_allocated_novu_model_file(
    std::string* novu_model_file) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (novu_model_file != nullptr) {
    
  } else {
    
  }
  novu_model_file_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      novu_model_file, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.ModelParam.novu_model_file)
}

// string caffe_model_file = 2;
inline void ModelParam::clear_caffe_model_file() {
  caffe_model_file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelParam::caffe_model_file() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ModelParam.caffe_model_file)
  return _internal_caffe_model_file();
}
inline void ModelParam::set_caffe_model_file(const std::string& value) {
  _internal_set_caffe_model_file(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ModelParam.caffe_model_file)
}
inline std::string* ModelParam::mutable_caffe_model_file() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.ModelParam.caffe_model_file)
  return _internal_mutable_caffe_model_file();
}
inline const std::string& ModelParam::_internal_caffe_model_file() const {
  return caffe_model_file_.Get();
}
inline void ModelParam::_internal_set_caffe_model_file(const std::string& value) {
  
  caffe_model_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelParam::set_caffe_model_file(std::string&& value) {
  
  caffe_model_file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.storage.ModelParam.caffe_model_file)
}
inline void ModelParam::set_caffe_model_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  caffe_model_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.ModelParam.caffe_model_file)
}
inline void ModelParam::set_caffe_model_file(const char* value,
    size_t size) {
  
  caffe_model_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.ModelParam.caffe_model_file)
}
inline std::string* ModelParam::_internal_mutable_caffe_model_file() {
  
  return caffe_model_file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelParam::release_caffe_model_file() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.ModelParam.caffe_model_file)
  return caffe_model_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelParam::set_allocated_caffe_model_file(std::string* caffe_model_file) {
  if (caffe_model_file != nullptr) {
    
  } else {
    
  }
  caffe_model_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), caffe_model_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.ModelParam.caffe_model_file)
}
inline std::string* ModelParam::unsafe_arena_release_caffe_model_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.storage.ModelParam.caffe_model_file)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return caffe_model_file_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ModelParam::unsafe_arena_set_allocated_caffe_model_file(
    std::string* caffe_model_file) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (caffe_model_file != nullptr) {
    
  } else {
    
  }
  caffe_model_file_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      caffe_model_file, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.ModelParam.caffe_model_file)
}

// string caffe_trained_file = 3;
inline void ModelParam::clear_caffe_trained_file() {
  caffe_trained_file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelParam::caffe_trained_file() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ModelParam.caffe_trained_file)
  return _internal_caffe_trained_file();
}
inline void ModelParam::set_caffe_trained_file(const std::string& value) {
  _internal_set_caffe_trained_file(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ModelParam.caffe_trained_file)
}
inline std::string* ModelParam::mutable_caffe_trained_file() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.ModelParam.caffe_trained_file)
  return _internal_mutable_caffe_trained_file();
}
inline const std::string& ModelParam::_internal_caffe_trained_file() const {
  return caffe_trained_file_.Get();
}
inline void ModelParam::_internal_set_caffe_trained_file(const std::string& value) {
  
  caffe_trained_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelParam::set_caffe_trained_file(std::string&& value) {
  
  caffe_trained_file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.storage.ModelParam.caffe_trained_file)
}
inline void ModelParam::set_caffe_trained_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  caffe_trained_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.ModelParam.caffe_trained_file)
}
inline void ModelParam::set_caffe_trained_file(const char* value,
    size_t size) {
  
  caffe_trained_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.ModelParam.caffe_trained_file)
}
inline std::string* ModelParam::_internal_mutable_caffe_trained_file() {
  
  return caffe_trained_file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelParam::release_caffe_trained_file() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.ModelParam.caffe_trained_file)
  return caffe_trained_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelParam::set_allocated_caffe_trained_file(std::string* caffe_trained_file) {
  if (caffe_trained_file != nullptr) {
    
  } else {
    
  }
  caffe_trained_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), caffe_trained_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.ModelParam.caffe_trained_file)
}
inline std::string* ModelParam::unsafe_arena_release_caffe_trained_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.storage.ModelParam.caffe_trained_file)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return caffe_trained_file_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ModelParam::unsafe_arena_set_allocated_caffe_trained_file(
    std::string* caffe_trained_file) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (caffe_trained_file != nullptr) {
    
  } else {
    
  }
  caffe_trained_file_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      caffe_trained_file, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.ModelParam.caffe_trained_file)
}

// string mean_file = 4;
inline void ModelParam::clear_mean_file() {
  mean_file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelParam::mean_file() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ModelParam.mean_file)
  return _internal_mean_file();
}
inline void ModelParam::set_mean_file(const std::string& value) {
  _internal_set_mean_file(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ModelParam.mean_file)
}
inline std::string* ModelParam::mutable_mean_file() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.ModelParam.mean_file)
  return _internal_mutable_mean_file();
}
inline const std::string& ModelParam::_internal_mean_file() const {
  return mean_file_.Get();
}
inline void ModelParam::_internal_set_mean_file(const std::string& value) {
  
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelParam::set_mean_file(std::string&& value) {
  
  mean_file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.storage.ModelParam.mean_file)
}
inline void ModelParam::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.ModelParam.mean_file)
}
inline void ModelParam::set_mean_file(const char* value,
    size_t size) {
  
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.ModelParam.mean_file)
}
inline std::string* ModelParam::_internal_mutable_mean_file() {
  
  return mean_file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelParam::release_mean_file() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.ModelParam.mean_file)
  return mean_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelParam::set_allocated_mean_file(std::string* mean_file) {
  if (mean_file != nullptr) {
    
  } else {
    
  }
  mean_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mean_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.ModelParam.mean_file)
}
inline std::string* ModelParam::unsafe_arena_release_mean_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.storage.ModelParam.mean_file)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mean_file_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ModelParam::unsafe_arena_set_allocated_mean_file(
    std::string* mean_file) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mean_file != nullptr) {
    
  } else {
    
  }
  mean_file_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mean_file, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.ModelParam.mean_file)
}

// string label_file = 5;
inline void ModelParam::clear_label_file() {
  label_file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelParam::label_file() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ModelParam.label_file)
  return _internal_label_file();
}
inline void ModelParam::set_label_file(const std::string& value) {
  _internal_set_label_file(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ModelParam.label_file)
}
inline std::string* ModelParam::mutable_label_file() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.ModelParam.label_file)
  return _internal_mutable_label_file();
}
inline const std::string& ModelParam::_internal_label_file() const {
  return label_file_.Get();
}
inline void ModelParam::_internal_set_label_file(const std::string& value) {
  
  label_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelParam::set_label_file(std::string&& value) {
  
  label_file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.storage.ModelParam.label_file)
}
inline void ModelParam::set_label_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.ModelParam.label_file)
}
inline void ModelParam::set_label_file(const char* value,
    size_t size) {
  
  label_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.ModelParam.label_file)
}
inline std::string* ModelParam::_internal_mutable_label_file() {
  
  return label_file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelParam::release_label_file() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.ModelParam.label_file)
  return label_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelParam::set_allocated_label_file(std::string* label_file) {
  if (label_file != nullptr) {
    
  } else {
    
  }
  label_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.ModelParam.label_file)
}
inline std::string* ModelParam::unsafe_arena_release_label_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.storage.ModelParam.label_file)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return label_file_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ModelParam::unsafe_arena_set_allocated_label_file(
    std::string* label_file) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (label_file != nullptr) {
    
  } else {
    
  }
  label_file_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      label_file, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.ModelParam.label_file)
}

// repeated .novumind.goku.proto.storage.ThresholdIdx threshold_idx = 6;
inline int ModelParam::_internal_threshold_idx_size() const {
  return threshold_idx_.size();
}
inline int ModelParam::threshold_idx_size() const {
  return _internal_threshold_idx_size();
}
inline void ModelParam::clear_threshold_idx() {
  threshold_idx_.Clear();
}
inline ::novumind::goku::proto::storage::ThresholdIdx* ModelParam::mutable_threshold_idx(int index) {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.ModelParam.threshold_idx)
  return threshold_idx_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::storage::ThresholdIdx >*
ModelParam::mutable_threshold_idx() {
  // @@protoc_insertion_point(field_mutable_list:novumind.goku.proto.storage.ModelParam.threshold_idx)
  return &threshold_idx_;
}
inline const ::novumind::goku::proto::storage::ThresholdIdx& ModelParam::_internal_threshold_idx(int index) const {
  return threshold_idx_.Get(index);
}
inline const ::novumind::goku::proto::storage::ThresholdIdx& ModelParam::threshold_idx(int index) const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ModelParam.threshold_idx)
  return _internal_threshold_idx(index);
}
inline ::novumind::goku::proto::storage::ThresholdIdx* ModelParam::_internal_add_threshold_idx() {
  return threshold_idx_.Add();
}
inline ::novumind::goku::proto::storage::ThresholdIdx* ModelParam::add_threshold_idx() {
  // @@protoc_insertion_point(field_add:novumind.goku.proto.storage.ModelParam.threshold_idx)
  return _internal_add_threshold_idx();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::storage::ThresholdIdx >&
ModelParam::threshold_idx() const {
  // @@protoc_insertion_point(field_list:novumind.goku.proto.storage.ModelParam.threshold_idx)
  return threshold_idx_;
}

// float stddev = 7;
inline void ModelParam::clear_stddev() {
  stddev_ = 0;
}
inline float ModelParam::_internal_stddev() const {
  return stddev_;
}
inline float ModelParam::stddev() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ModelParam.stddev)
  return _internal_stddev();
}
inline void ModelParam::_internal_set_stddev(float value) {
  
  stddev_ = value;
}
inline void ModelParam::set_stddev(float value) {
  _internal_set_stddev(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ModelParam.stddev)
}

// int32 base_size = 8;
inline void ModelParam::clear_base_size() {
  base_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelParam::_internal_base_size() const {
  return base_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelParam::base_size() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ModelParam.base_size)
  return _internal_base_size();
}
inline void ModelParam::_internal_set_base_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  base_size_ = value;
}
inline void ModelParam::set_base_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_base_size(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ModelParam.base_size)
}

// int32 top_k = 9;
inline void ModelParam::clear_top_k() {
  top_k_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelParam::_internal_top_k() const {
  return top_k_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelParam::top_k() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ModelParam.top_k)
  return _internal_top_k();
}
inline void ModelParam::_internal_set_top_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  top_k_ = value;
}
inline void ModelParam::set_top_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_top_k(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ModelParam.top_k)
}

// bool is_bgr = 10;
inline void ModelParam::clear_is_bgr() {
  is_bgr_ = false;
}
inline bool ModelParam::_internal_is_bgr() const {
  return is_bgr_;
}
inline bool ModelParam::is_bgr() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ModelParam.is_bgr)
  return _internal_is_bgr();
}
inline void ModelParam::_internal_set_is_bgr(bool value) {
  
  is_bgr_ = value;
}
inline void ModelParam::set_is_bgr(bool value) {
  _internal_set_is_bgr(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ModelParam.is_bgr)
}

// -------------------------------------------------------------------

// ModelGroup

// string id = 1;
inline void ModelGroup::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelGroup::id() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ModelGroup.id)
  return _internal_id();
}
inline void ModelGroup::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ModelGroup.id)
}
inline std::string* ModelGroup::mutable_id() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.ModelGroup.id)
  return _internal_mutable_id();
}
inline const std::string& ModelGroup::_internal_id() const {
  return id_.Get();
}
inline void ModelGroup::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelGroup::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.storage.ModelGroup.id)
}
inline void ModelGroup::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.ModelGroup.id)
}
inline void ModelGroup::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.ModelGroup.id)
}
inline std::string* ModelGroup::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelGroup::release_id() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.ModelGroup.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelGroup::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.ModelGroup.id)
}
inline std::string* ModelGroup::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.storage.ModelGroup.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ModelGroup::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.ModelGroup.id)
}

// string topic_name = 2;
inline void ModelGroup::clear_topic_name() {
  topic_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelGroup::topic_name() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ModelGroup.topic_name)
  return _internal_topic_name();
}
inline void ModelGroup::set_topic_name(const std::string& value) {
  _internal_set_topic_name(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ModelGroup.topic_name)
}
inline std::string* ModelGroup::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.ModelGroup.topic_name)
  return _internal_mutable_topic_name();
}
inline const std::string& ModelGroup::_internal_topic_name() const {
  return topic_name_.Get();
}
inline void ModelGroup::_internal_set_topic_name(const std::string& value) {
  
  topic_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelGroup::set_topic_name(std::string&& value) {
  
  topic_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.storage.ModelGroup.topic_name)
}
inline void ModelGroup::set_topic_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.ModelGroup.topic_name)
}
inline void ModelGroup::set_topic_name(const char* value,
    size_t size) {
  
  topic_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.ModelGroup.topic_name)
}
inline std::string* ModelGroup::_internal_mutable_topic_name() {
  
  return topic_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelGroup::release_topic_name() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.ModelGroup.topic_name)
  return topic_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelGroup::set_allocated_topic_name(std::string* topic_name) {
  if (topic_name != nullptr) {
    
  } else {
    
  }
  topic_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.ModelGroup.topic_name)
}
inline std::string* ModelGroup::unsafe_arena_release_topic_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.storage.ModelGroup.topic_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return topic_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ModelGroup::unsafe_arena_set_allocated_topic_name(
    std::string* topic_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (topic_name != nullptr) {
    
  } else {
    
  }
  topic_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      topic_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.ModelGroup.topic_name)
}

// repeated string model_ids = 3;
inline int ModelGroup::_internal_model_ids_size() const {
  return model_ids_.size();
}
inline int ModelGroup::model_ids_size() const {
  return _internal_model_ids_size();
}
inline void ModelGroup::clear_model_ids() {
  model_ids_.Clear();
}
inline std::string* ModelGroup::add_model_ids() {
  // @@protoc_insertion_point(field_add_mutable:novumind.goku.proto.storage.ModelGroup.model_ids)
  return _internal_add_model_ids();
}
inline const std::string& ModelGroup::_internal_model_ids(int index) const {
  return model_ids_.Get(index);
}
inline const std::string& ModelGroup::model_ids(int index) const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ModelGroup.model_ids)
  return _internal_model_ids(index);
}
inline std::string* ModelGroup::mutable_model_ids(int index) {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.ModelGroup.model_ids)
  return model_ids_.Mutable(index);
}
inline void ModelGroup::set_model_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ModelGroup.model_ids)
  model_ids_.Mutable(index)->assign(value);
}
inline void ModelGroup::set_model_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ModelGroup.model_ids)
  model_ids_.Mutable(index)->assign(std::move(value));
}
inline void ModelGroup::set_model_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  model_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.ModelGroup.model_ids)
}
inline void ModelGroup::set_model_ids(int index, const char* value, size_t size) {
  model_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.ModelGroup.model_ids)
}
inline std::string* ModelGroup::_internal_add_model_ids() {
  return model_ids_.Add();
}
inline void ModelGroup::add_model_ids(const std::string& value) {
  model_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:novumind.goku.proto.storage.ModelGroup.model_ids)
}
inline void ModelGroup::add_model_ids(std::string&& value) {
  model_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:novumind.goku.proto.storage.ModelGroup.model_ids)
}
inline void ModelGroup::add_model_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  model_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:novumind.goku.proto.storage.ModelGroup.model_ids)
}
inline void ModelGroup::add_model_ids(const char* value, size_t size) {
  model_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:novumind.goku.proto.storage.ModelGroup.model_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModelGroup::model_ids() const {
  // @@protoc_insertion_point(field_list:novumind.goku.proto.storage.ModelGroup.model_ids)
  return model_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModelGroup::mutable_model_ids() {
  // @@protoc_insertion_point(field_mutable_list:novumind.goku.proto.storage.ModelGroup.model_ids)
  return &model_ids_;
}

// -------------------------------------------------------------------

// ExampleInfo

// int32 frame_num = 1;
inline void ExampleInfo::clear_frame_num() {
  frame_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExampleInfo::_internal_frame_num() const {
  return frame_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExampleInfo::frame_num() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ExampleInfo.frame_num)
  return _internal_frame_num();
}
inline void ExampleInfo::_internal_set_frame_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frame_num_ = value;
}
inline void ExampleInfo::set_frame_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_num(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ExampleInfo.frame_num)
}

// string tag = 2;
inline void ExampleInfo::clear_tag() {
  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExampleInfo::tag() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ExampleInfo.tag)
  return _internal_tag();
}
inline void ExampleInfo::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ExampleInfo.tag)
}
inline std::string* ExampleInfo::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.ExampleInfo.tag)
  return _internal_mutable_tag();
}
inline const std::string& ExampleInfo::_internal_tag() const {
  return tag_.Get();
}
inline void ExampleInfo::_internal_set_tag(const std::string& value) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExampleInfo::set_tag(std::string&& value) {
  
  tag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.storage.ExampleInfo.tag)
}
inline void ExampleInfo::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.ExampleInfo.tag)
}
inline void ExampleInfo::set_tag(const char* value,
    size_t size) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.ExampleInfo.tag)
}
inline std::string* ExampleInfo::_internal_mutable_tag() {
  
  return tag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExampleInfo::release_tag() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.ExampleInfo.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExampleInfo::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.ExampleInfo.tag)
}
inline std::string* ExampleInfo::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.storage.ExampleInfo.tag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExampleInfo::unsafe_arena_set_allocated_tag(
    std::string* tag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.ExampleInfo.tag)
}

// float confidence = 3;
inline void ExampleInfo::clear_confidence() {
  confidence_ = 0;
}
inline float ExampleInfo::_internal_confidence() const {
  return confidence_;
}
inline float ExampleInfo::confidence() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ExampleInfo.confidence)
  return _internal_confidence();
}
inline void ExampleInfo::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void ExampleInfo::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ExampleInfo.confidence)
}

// bytes image = 4;
inline void ExampleInfo::clear_image() {
  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExampleInfo::image() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.storage.ExampleInfo.image)
  return _internal_image();
}
inline void ExampleInfo::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.storage.ExampleInfo.image)
}
inline std::string* ExampleInfo::mutable_image() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.storage.ExampleInfo.image)
  return _internal_mutable_image();
}
inline const std::string& ExampleInfo::_internal_image() const {
  return image_.Get();
}
inline void ExampleInfo::_internal_set_image(const std::string& value) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExampleInfo::set_image(std::string&& value) {
  
  image_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.storage.ExampleInfo.image)
}
inline void ExampleInfo::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.storage.ExampleInfo.image)
}
inline void ExampleInfo::set_image(const void* value,
    size_t size) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.storage.ExampleInfo.image)
}
inline std::string* ExampleInfo::_internal_mutable_image() {
  
  return image_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExampleInfo::release_image() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.storage.ExampleInfo.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExampleInfo::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.storage.ExampleInfo.image)
}
inline std::string* ExampleInfo::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.storage.ExampleInfo.image)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExampleInfo::unsafe_arena_set_allocated_image(
    std::string* image) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image != nullptr) {
    
  } else {
    
  }
  image_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.storage.ExampleInfo.image)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace storage
}  // namespace proto
}  // namespace goku
}  // namespace novumind

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::novumind::goku::proto::storage::Task_StatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::novumind::goku::proto::storage::Task_StatusCode>() {
  return ::novumind::goku::proto::storage::Task_StatusCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_storage_2eproto
