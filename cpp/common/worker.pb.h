// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: worker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_worker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_worker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "storage.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_worker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_worker_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_worker_2eproto;
namespace novumind {
namespace goku {
namespace proto {
namespace worker {
class AnnotateVideoRequest;
class AnnotateVideoRequestDefaultTypeInternal;
extern AnnotateVideoRequestDefaultTypeInternal _AnnotateVideoRequest_default_instance_;
class AnnotateVideoResponse;
class AnnotateVideoResponseDefaultTypeInternal;
extern AnnotateVideoResponseDefaultTypeInternal _AnnotateVideoResponse_default_instance_;
class CheckInferenceCoreRequest;
class CheckInferenceCoreRequestDefaultTypeInternal;
extern CheckInferenceCoreRequestDefaultTypeInternal _CheckInferenceCoreRequest_default_instance_;
class CheckInferenceCoreResponse;
class CheckInferenceCoreResponseDefaultTypeInternal;
extern CheckInferenceCoreResponseDefaultTypeInternal _CheckInferenceCoreResponse_default_instance_;
class LabelConfidence;
class LabelConfidenceDefaultTypeInternal;
extern LabelConfidenceDefaultTypeInternal _LabelConfidence_default_instance_;
class VideoSummaryResponse;
class VideoSummaryResponseDefaultTypeInternal;
extern VideoSummaryResponseDefaultTypeInternal _VideoSummaryResponse_default_instance_;
}  // namespace worker
}  // namespace proto
}  // namespace goku
}  // namespace novumind
PROTOBUF_NAMESPACE_OPEN
template<> ::novumind::goku::proto::worker::AnnotateVideoRequest* Arena::CreateMaybeMessage<::novumind::goku::proto::worker::AnnotateVideoRequest>(Arena*);
template<> ::novumind::goku::proto::worker::AnnotateVideoResponse* Arena::CreateMaybeMessage<::novumind::goku::proto::worker::AnnotateVideoResponse>(Arena*);
template<> ::novumind::goku::proto::worker::CheckInferenceCoreRequest* Arena::CreateMaybeMessage<::novumind::goku::proto::worker::CheckInferenceCoreRequest>(Arena*);
template<> ::novumind::goku::proto::worker::CheckInferenceCoreResponse* Arena::CreateMaybeMessage<::novumind::goku::proto::worker::CheckInferenceCoreResponse>(Arena*);
template<> ::novumind::goku::proto::worker::LabelConfidence* Arena::CreateMaybeMessage<::novumind::goku::proto::worker::LabelConfidence>(Arena*);
template<> ::novumind::goku::proto::worker::VideoSummaryResponse* Arena::CreateMaybeMessage<::novumind::goku::proto::worker::VideoSummaryResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace novumind {
namespace goku {
namespace proto {
namespace worker {

// ===================================================================

class AnnotateVideoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:novumind.goku.proto.worker.AnnotateVideoRequest) */ {
 public:
  inline AnnotateVideoRequest() : AnnotateVideoRequest(nullptr) {};
  virtual ~AnnotateVideoRequest();

  AnnotateVideoRequest(const AnnotateVideoRequest& from);
  AnnotateVideoRequest(AnnotateVideoRequest&& from) noexcept
    : AnnotateVideoRequest() {
    *this = ::std::move(from);
  }

  inline AnnotateVideoRequest& operator=(const AnnotateVideoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnnotateVideoRequest& operator=(AnnotateVideoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnnotateVideoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnnotateVideoRequest* internal_default_instance() {
    return reinterpret_cast<const AnnotateVideoRequest*>(
               &_AnnotateVideoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnnotateVideoRequest& a, AnnotateVideoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AnnotateVideoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnnotateVideoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnnotateVideoRequest* New() const final {
    return CreateMaybeMessage<AnnotateVideoRequest>(nullptr);
  }

  AnnotateVideoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnnotateVideoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnnotateVideoRequest& from);
  void MergeFrom(const AnnotateVideoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnnotateVideoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "novumind.goku.proto.worker.AnnotateVideoRequest";
  }
  protected:
  explicit AnnotateVideoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_worker_2eproto);
    return ::descriptor_table_worker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kVideoPathFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string video_path = 2;
  void clear_video_path();
  const std::string& video_path() const;
  void set_video_path(const std::string& value);
  void set_video_path(std::string&& value);
  void set_video_path(const char* value);
  void set_video_path(const char* value, size_t size);
  std::string* mutable_video_path();
  std::string* release_video_path();
  void set_allocated_video_path(std::string* video_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_video_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_video_path(
      std::string* video_path);
  private:
  const std::string& _internal_video_path() const;
  void _internal_set_video_path(const std::string& value);
  std::string* _internal_mutable_video_path();
  public:

  // @@protoc_insertion_point(class_scope:novumind.goku.proto.worker.AnnotateVideoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_worker_2eproto;
};
// -------------------------------------------------------------------

class AnnotateVideoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:novumind.goku.proto.worker.AnnotateVideoResponse) */ {
 public:
  inline AnnotateVideoResponse() : AnnotateVideoResponse(nullptr) {};
  virtual ~AnnotateVideoResponse();

  AnnotateVideoResponse(const AnnotateVideoResponse& from);
  AnnotateVideoResponse(AnnotateVideoResponse&& from) noexcept
    : AnnotateVideoResponse() {
    *this = ::std::move(from);
  }

  inline AnnotateVideoResponse& operator=(const AnnotateVideoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnnotateVideoResponse& operator=(AnnotateVideoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnnotateVideoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnnotateVideoResponse* internal_default_instance() {
    return reinterpret_cast<const AnnotateVideoResponse*>(
               &_AnnotateVideoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AnnotateVideoResponse& a, AnnotateVideoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AnnotateVideoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnnotateVideoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnnotateVideoResponse* New() const final {
    return CreateMaybeMessage<AnnotateVideoResponse>(nullptr);
  }

  AnnotateVideoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnnotateVideoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnnotateVideoResponse& from);
  void MergeFrom(const AnnotateVideoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnnotateVideoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "novumind.goku.proto.worker.AnnotateVideoResponse";
  }
  protected:
  explicit AnnotateVideoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_worker_2eproto);
    return ::descriptor_table_worker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadatasFieldNumber = 3,
    kTotalNumFieldNumber = 1,
    kProcessedNumFieldNumber = 2,
  };
  // repeated .novumind.goku.proto.storage.FrameMetadata metadatas = 3;
  int metadatas_size() const;
  private:
  int _internal_metadatas_size() const;
  public:
  void clear_metadatas();
  ::novumind::goku::proto::storage::FrameMetadata* mutable_metadatas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::storage::FrameMetadata >*
      mutable_metadatas();
  private:
  const ::novumind::goku::proto::storage::FrameMetadata& _internal_metadatas(int index) const;
  ::novumind::goku::proto::storage::FrameMetadata* _internal_add_metadatas();
  public:
  const ::novumind::goku::proto::storage::FrameMetadata& metadatas(int index) const;
  ::novumind::goku::proto::storage::FrameMetadata* add_metadatas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::storage::FrameMetadata >&
      metadatas() const;

  // int64 total_num = 1;
  void clear_total_num();
  ::PROTOBUF_NAMESPACE_ID::int64 total_num() const;
  void set_total_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_num() const;
  void _internal_set_total_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 processed_num = 2;
  void clear_processed_num();
  ::PROTOBUF_NAMESPACE_ID::int64 processed_num() const;
  void set_processed_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_processed_num() const;
  void _internal_set_processed_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:novumind.goku.proto.worker.AnnotateVideoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::storage::FrameMetadata > metadatas_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_num_;
  ::PROTOBUF_NAMESPACE_ID::int64 processed_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_worker_2eproto;
};
// -------------------------------------------------------------------

class CheckInferenceCoreRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:novumind.goku.proto.worker.CheckInferenceCoreRequest) */ {
 public:
  inline CheckInferenceCoreRequest() : CheckInferenceCoreRequest(nullptr) {};
  virtual ~CheckInferenceCoreRequest();

  CheckInferenceCoreRequest(const CheckInferenceCoreRequest& from);
  CheckInferenceCoreRequest(CheckInferenceCoreRequest&& from) noexcept
    : CheckInferenceCoreRequest() {
    *this = ::std::move(from);
  }

  inline CheckInferenceCoreRequest& operator=(const CheckInferenceCoreRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckInferenceCoreRequest& operator=(CheckInferenceCoreRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckInferenceCoreRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckInferenceCoreRequest* internal_default_instance() {
    return reinterpret_cast<const CheckInferenceCoreRequest*>(
               &_CheckInferenceCoreRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CheckInferenceCoreRequest& a, CheckInferenceCoreRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckInferenceCoreRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckInferenceCoreRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckInferenceCoreRequest* New() const final {
    return CreateMaybeMessage<CheckInferenceCoreRequest>(nullptr);
  }

  CheckInferenceCoreRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckInferenceCoreRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckInferenceCoreRequest& from);
  void MergeFrom(const CheckInferenceCoreRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckInferenceCoreRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "novumind.goku.proto.worker.CheckInferenceCoreRequest";
  }
  protected:
  explicit CheckInferenceCoreRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_worker_2eproto);
    return ::descriptor_table_worker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:novumind.goku.proto.worker.CheckInferenceCoreRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_worker_2eproto;
};
// -------------------------------------------------------------------

class CheckInferenceCoreResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:novumind.goku.proto.worker.CheckInferenceCoreResponse) */ {
 public:
  inline CheckInferenceCoreResponse() : CheckInferenceCoreResponse(nullptr) {};
  virtual ~CheckInferenceCoreResponse();

  CheckInferenceCoreResponse(const CheckInferenceCoreResponse& from);
  CheckInferenceCoreResponse(CheckInferenceCoreResponse&& from) noexcept
    : CheckInferenceCoreResponse() {
    *this = ::std::move(from);
  }

  inline CheckInferenceCoreResponse& operator=(const CheckInferenceCoreResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckInferenceCoreResponse& operator=(CheckInferenceCoreResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckInferenceCoreResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckInferenceCoreResponse* internal_default_instance() {
    return reinterpret_cast<const CheckInferenceCoreResponse*>(
               &_CheckInferenceCoreResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CheckInferenceCoreResponse& a, CheckInferenceCoreResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckInferenceCoreResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckInferenceCoreResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckInferenceCoreResponse* New() const final {
    return CreateMaybeMessage<CheckInferenceCoreResponse>(nullptr);
  }

  CheckInferenceCoreResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckInferenceCoreResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckInferenceCoreResponse& from);
  void MergeFrom(const CheckInferenceCoreResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckInferenceCoreResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "novumind.goku.proto.worker.CheckInferenceCoreResponse";
  }
  protected:
  explicit CheckInferenceCoreResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_worker_2eproto);
    return ::descriptor_table_worker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsAbleFieldNumber = 1,
  };
  // bool is_able = 1;
  void clear_is_able();
  bool is_able() const;
  void set_is_able(bool value);
  private:
  bool _internal_is_able() const;
  void _internal_set_is_able(bool value);
  public:

  // @@protoc_insertion_point(class_scope:novumind.goku.proto.worker.CheckInferenceCoreResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_able_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_worker_2eproto;
};
// -------------------------------------------------------------------

class LabelConfidence PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:novumind.goku.proto.worker.LabelConfidence) */ {
 public:
  inline LabelConfidence() : LabelConfidence(nullptr) {};
  virtual ~LabelConfidence();

  LabelConfidence(const LabelConfidence& from);
  LabelConfidence(LabelConfidence&& from) noexcept
    : LabelConfidence() {
    *this = ::std::move(from);
  }

  inline LabelConfidence& operator=(const LabelConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelConfidence& operator=(LabelConfidence&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelConfidence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelConfidence* internal_default_instance() {
    return reinterpret_cast<const LabelConfidence*>(
               &_LabelConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LabelConfidence& a, LabelConfidence& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelConfidence* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelConfidence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelConfidence* New() const final {
    return CreateMaybeMessage<LabelConfidence>(nullptr);
  }

  LabelConfidence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelConfidence>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelConfidence& from);
  void MergeFrom(const LabelConfidence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelConfidence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "novumind.goku.proto.worker.LabelConfidence";
  }
  protected:
  explicit LabelConfidence(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_worker_2eproto);
    return ::descriptor_table_worker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kConfidenceFieldNumber = 2,
    kFrameNumFieldNumber = 3,
  };
  // string label = 1;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_label();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_label(
      std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // double confidence = 2;
  void clear_confidence();
  double confidence() const;
  void set_confidence(double value);
  private:
  double _internal_confidence() const;
  void _internal_set_confidence(double value);
  public:

  // int64 frame_num = 3;
  void clear_frame_num();
  ::PROTOBUF_NAMESPACE_ID::int64 frame_num() const;
  void set_frame_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_frame_num() const;
  void _internal_set_frame_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:novumind.goku.proto.worker.LabelConfidence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  double confidence_;
  ::PROTOBUF_NAMESPACE_ID::int64 frame_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_worker_2eproto;
};
// -------------------------------------------------------------------

class VideoSummaryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:novumind.goku.proto.worker.VideoSummaryResponse) */ {
 public:
  inline VideoSummaryResponse() : VideoSummaryResponse(nullptr) {};
  virtual ~VideoSummaryResponse();

  VideoSummaryResponse(const VideoSummaryResponse& from);
  VideoSummaryResponse(VideoSummaryResponse&& from) noexcept
    : VideoSummaryResponse() {
    *this = ::std::move(from);
  }

  inline VideoSummaryResponse& operator=(const VideoSummaryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoSummaryResponse& operator=(VideoSummaryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoSummaryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoSummaryResponse* internal_default_instance() {
    return reinterpret_cast<const VideoSummaryResponse*>(
               &_VideoSummaryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VideoSummaryResponse& a, VideoSummaryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoSummaryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoSummaryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoSummaryResponse* New() const final {
    return CreateMaybeMessage<VideoSummaryResponse>(nullptr);
  }

  VideoSummaryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoSummaryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoSummaryResponse& from);
  void MergeFrom(const VideoSummaryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoSummaryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "novumind.goku.proto.worker.VideoSummaryResponse";
  }
  protected:
  explicit VideoSummaryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_worker_2eproto);
    return ::descriptor_table_worker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelConfsFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kTotalFrameNumFieldNumber = 2,
  };
  // repeated .novumind.goku.proto.worker.LabelConfidence label_confs = 3;
  int label_confs_size() const;
  private:
  int _internal_label_confs_size() const;
  public:
  void clear_label_confs();
  ::novumind::goku::proto::worker::LabelConfidence* mutable_label_confs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::worker::LabelConfidence >*
      mutable_label_confs();
  private:
  const ::novumind::goku::proto::worker::LabelConfidence& _internal_label_confs(int index) const;
  ::novumind::goku::proto::worker::LabelConfidence* _internal_add_label_confs();
  public:
  const ::novumind::goku::proto::worker::LabelConfidence& label_confs(int index) const;
  ::novumind::goku::proto::worker::LabelConfidence* add_label_confs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::worker::LabelConfidence >&
      label_confs() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // int64 total_frame_num = 2;
  void clear_total_frame_num();
  ::PROTOBUF_NAMESPACE_ID::int64 total_frame_num() const;
  void set_total_frame_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_frame_num() const;
  void _internal_set_total_frame_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:novumind.goku.proto.worker.VideoSummaryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::worker::LabelConfidence > label_confs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_frame_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_worker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnnotateVideoRequest

// string request_id = 1;
inline void AnnotateVideoRequest::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AnnotateVideoRequest::request_id() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.worker.AnnotateVideoRequest.request_id)
  return _internal_request_id();
}
inline void AnnotateVideoRequest::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.worker.AnnotateVideoRequest.request_id)
}
inline std::string* AnnotateVideoRequest::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.worker.AnnotateVideoRequest.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& AnnotateVideoRequest::_internal_request_id() const {
  return request_id_.Get();
}
inline void AnnotateVideoRequest::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AnnotateVideoRequest::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.worker.AnnotateVideoRequest.request_id)
}
inline void AnnotateVideoRequest::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.worker.AnnotateVideoRequest.request_id)
}
inline void AnnotateVideoRequest::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.worker.AnnotateVideoRequest.request_id)
}
inline std::string* AnnotateVideoRequest::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AnnotateVideoRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.worker.AnnotateVideoRequest.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnnotateVideoRequest::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.worker.AnnotateVideoRequest.request_id)
}
inline std::string* AnnotateVideoRequest::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.worker.AnnotateVideoRequest.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AnnotateVideoRequest::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.worker.AnnotateVideoRequest.request_id)
}

// string video_path = 2;
inline void AnnotateVideoRequest::clear_video_path() {
  video_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AnnotateVideoRequest::video_path() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.worker.AnnotateVideoRequest.video_path)
  return _internal_video_path();
}
inline void AnnotateVideoRequest::set_video_path(const std::string& value) {
  _internal_set_video_path(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.worker.AnnotateVideoRequest.video_path)
}
inline std::string* AnnotateVideoRequest::mutable_video_path() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.worker.AnnotateVideoRequest.video_path)
  return _internal_mutable_video_path();
}
inline const std::string& AnnotateVideoRequest::_internal_video_path() const {
  return video_path_.Get();
}
inline void AnnotateVideoRequest::_internal_set_video_path(const std::string& value) {
  
  video_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AnnotateVideoRequest::set_video_path(std::string&& value) {
  
  video_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.worker.AnnotateVideoRequest.video_path)
}
inline void AnnotateVideoRequest::set_video_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  video_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.worker.AnnotateVideoRequest.video_path)
}
inline void AnnotateVideoRequest::set_video_path(const char* value,
    size_t size) {
  
  video_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.worker.AnnotateVideoRequest.video_path)
}
inline std::string* AnnotateVideoRequest::_internal_mutable_video_path() {
  
  return video_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AnnotateVideoRequest::release_video_path() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.worker.AnnotateVideoRequest.video_path)
  return video_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnnotateVideoRequest::set_allocated_video_path(std::string* video_path) {
  if (video_path != nullptr) {
    
  } else {
    
  }
  video_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), video_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.worker.AnnotateVideoRequest.video_path)
}
inline std::string* AnnotateVideoRequest::unsafe_arena_release_video_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.worker.AnnotateVideoRequest.video_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return video_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AnnotateVideoRequest::unsafe_arena_set_allocated_video_path(
    std::string* video_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (video_path != nullptr) {
    
  } else {
    
  }
  video_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      video_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.worker.AnnotateVideoRequest.video_path)
}

// -------------------------------------------------------------------

// AnnotateVideoResponse

// int64 total_num = 1;
inline void AnnotateVideoResponse::clear_total_num() {
  total_num_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AnnotateVideoResponse::_internal_total_num() const {
  return total_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AnnotateVideoResponse::total_num() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.worker.AnnotateVideoResponse.total_num)
  return _internal_total_num();
}
inline void AnnotateVideoResponse::_internal_set_total_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_num_ = value;
}
inline void AnnotateVideoResponse::set_total_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_num(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.worker.AnnotateVideoResponse.total_num)
}

// int64 processed_num = 2;
inline void AnnotateVideoResponse::clear_processed_num() {
  processed_num_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AnnotateVideoResponse::_internal_processed_num() const {
  return processed_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AnnotateVideoResponse::processed_num() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.worker.AnnotateVideoResponse.processed_num)
  return _internal_processed_num();
}
inline void AnnotateVideoResponse::_internal_set_processed_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  processed_num_ = value;
}
inline void AnnotateVideoResponse::set_processed_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_processed_num(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.worker.AnnotateVideoResponse.processed_num)
}

// repeated .novumind.goku.proto.storage.FrameMetadata metadatas = 3;
inline int AnnotateVideoResponse::_internal_metadatas_size() const {
  return metadatas_.size();
}
inline int AnnotateVideoResponse::metadatas_size() const {
  return _internal_metadatas_size();
}
inline ::novumind::goku::proto::storage::FrameMetadata* AnnotateVideoResponse::mutable_metadatas(int index) {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.worker.AnnotateVideoResponse.metadatas)
  return metadatas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::storage::FrameMetadata >*
AnnotateVideoResponse::mutable_metadatas() {
  // @@protoc_insertion_point(field_mutable_list:novumind.goku.proto.worker.AnnotateVideoResponse.metadatas)
  return &metadatas_;
}
inline const ::novumind::goku::proto::storage::FrameMetadata& AnnotateVideoResponse::_internal_metadatas(int index) const {
  return metadatas_.Get(index);
}
inline const ::novumind::goku::proto::storage::FrameMetadata& AnnotateVideoResponse::metadatas(int index) const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.worker.AnnotateVideoResponse.metadatas)
  return _internal_metadatas(index);
}
inline ::novumind::goku::proto::storage::FrameMetadata* AnnotateVideoResponse::_internal_add_metadatas() {
  return metadatas_.Add();
}
inline ::novumind::goku::proto::storage::FrameMetadata* AnnotateVideoResponse::add_metadatas() {
  // @@protoc_insertion_point(field_add:novumind.goku.proto.worker.AnnotateVideoResponse.metadatas)
  return _internal_add_metadatas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::storage::FrameMetadata >&
AnnotateVideoResponse::metadatas() const {
  // @@protoc_insertion_point(field_list:novumind.goku.proto.worker.AnnotateVideoResponse.metadatas)
  return metadatas_;
}

// -------------------------------------------------------------------

// CheckInferenceCoreRequest

// -------------------------------------------------------------------

// CheckInferenceCoreResponse

// bool is_able = 1;
inline void CheckInferenceCoreResponse::clear_is_able() {
  is_able_ = false;
}
inline bool CheckInferenceCoreResponse::_internal_is_able() const {
  return is_able_;
}
inline bool CheckInferenceCoreResponse::is_able() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.worker.CheckInferenceCoreResponse.is_able)
  return _internal_is_able();
}
inline void CheckInferenceCoreResponse::_internal_set_is_able(bool value) {
  
  is_able_ = value;
}
inline void CheckInferenceCoreResponse::set_is_able(bool value) {
  _internal_set_is_able(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.worker.CheckInferenceCoreResponse.is_able)
}

// -------------------------------------------------------------------

// LabelConfidence

// string label = 1;
inline void LabelConfidence::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LabelConfidence::label() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.worker.LabelConfidence.label)
  return _internal_label();
}
inline void LabelConfidence::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.worker.LabelConfidence.label)
}
inline std::string* LabelConfidence::mutable_label() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.worker.LabelConfidence.label)
  return _internal_mutable_label();
}
inline const std::string& LabelConfidence::_internal_label() const {
  return label_.Get();
}
inline void LabelConfidence::_internal_set_label(const std::string& value) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LabelConfidence::set_label(std::string&& value) {
  
  label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.worker.LabelConfidence.label)
}
inline void LabelConfidence::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.worker.LabelConfidence.label)
}
inline void LabelConfidence::set_label(const char* value,
    size_t size) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.worker.LabelConfidence.label)
}
inline std::string* LabelConfidence::_internal_mutable_label() {
  
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LabelConfidence::release_label() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.worker.LabelConfidence.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LabelConfidence::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.worker.LabelConfidence.label)
}
inline std::string* LabelConfidence::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.worker.LabelConfidence.label)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return label_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LabelConfidence::unsafe_arena_set_allocated_label(
    std::string* label) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (label != nullptr) {
    
  } else {
    
  }
  label_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      label, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.worker.LabelConfidence.label)
}

// double confidence = 2;
inline void LabelConfidence::clear_confidence() {
  confidence_ = 0;
}
inline double LabelConfidence::_internal_confidence() const {
  return confidence_;
}
inline double LabelConfidence::confidence() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.worker.LabelConfidence.confidence)
  return _internal_confidence();
}
inline void LabelConfidence::_internal_set_confidence(double value) {
  
  confidence_ = value;
}
inline void LabelConfidence::set_confidence(double value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.worker.LabelConfidence.confidence)
}

// int64 frame_num = 3;
inline void LabelConfidence::clear_frame_num() {
  frame_num_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LabelConfidence::_internal_frame_num() const {
  return frame_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LabelConfidence::frame_num() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.worker.LabelConfidence.frame_num)
  return _internal_frame_num();
}
inline void LabelConfidence::_internal_set_frame_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  frame_num_ = value;
}
inline void LabelConfidence::set_frame_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_frame_num(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.worker.LabelConfidence.frame_num)
}

// -------------------------------------------------------------------

// VideoSummaryResponse

// string request_id = 1;
inline void VideoSummaryResponse::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VideoSummaryResponse::request_id() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.worker.VideoSummaryResponse.request_id)
  return _internal_request_id();
}
inline void VideoSummaryResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.worker.VideoSummaryResponse.request_id)
}
inline std::string* VideoSummaryResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.worker.VideoSummaryResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& VideoSummaryResponse::_internal_request_id() const {
  return request_id_.Get();
}
inline void VideoSummaryResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VideoSummaryResponse::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:novumind.goku.proto.worker.VideoSummaryResponse.request_id)
}
inline void VideoSummaryResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:novumind.goku.proto.worker.VideoSummaryResponse.request_id)
}
inline void VideoSummaryResponse::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:novumind.goku.proto.worker.VideoSummaryResponse.request_id)
}
inline std::string* VideoSummaryResponse::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VideoSummaryResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:novumind.goku.proto.worker.VideoSummaryResponse.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VideoSummaryResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:novumind.goku.proto.worker.VideoSummaryResponse.request_id)
}
inline std::string* VideoSummaryResponse::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:novumind.goku.proto.worker.VideoSummaryResponse.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VideoSummaryResponse::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novumind.goku.proto.worker.VideoSummaryResponse.request_id)
}

// int64 total_frame_num = 2;
inline void VideoSummaryResponse::clear_total_frame_num() {
  total_frame_num_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VideoSummaryResponse::_internal_total_frame_num() const {
  return total_frame_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VideoSummaryResponse::total_frame_num() const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.worker.VideoSummaryResponse.total_frame_num)
  return _internal_total_frame_num();
}
inline void VideoSummaryResponse::_internal_set_total_frame_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_frame_num_ = value;
}
inline void VideoSummaryResponse::set_total_frame_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_frame_num(value);
  // @@protoc_insertion_point(field_set:novumind.goku.proto.worker.VideoSummaryResponse.total_frame_num)
}

// repeated .novumind.goku.proto.worker.LabelConfidence label_confs = 3;
inline int VideoSummaryResponse::_internal_label_confs_size() const {
  return label_confs_.size();
}
inline int VideoSummaryResponse::label_confs_size() const {
  return _internal_label_confs_size();
}
inline void VideoSummaryResponse::clear_label_confs() {
  label_confs_.Clear();
}
inline ::novumind::goku::proto::worker::LabelConfidence* VideoSummaryResponse::mutable_label_confs(int index) {
  // @@protoc_insertion_point(field_mutable:novumind.goku.proto.worker.VideoSummaryResponse.label_confs)
  return label_confs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::worker::LabelConfidence >*
VideoSummaryResponse::mutable_label_confs() {
  // @@protoc_insertion_point(field_mutable_list:novumind.goku.proto.worker.VideoSummaryResponse.label_confs)
  return &label_confs_;
}
inline const ::novumind::goku::proto::worker::LabelConfidence& VideoSummaryResponse::_internal_label_confs(int index) const {
  return label_confs_.Get(index);
}
inline const ::novumind::goku::proto::worker::LabelConfidence& VideoSummaryResponse::label_confs(int index) const {
  // @@protoc_insertion_point(field_get:novumind.goku.proto.worker.VideoSummaryResponse.label_confs)
  return _internal_label_confs(index);
}
inline ::novumind::goku::proto::worker::LabelConfidence* VideoSummaryResponse::_internal_add_label_confs() {
  return label_confs_.Add();
}
inline ::novumind::goku::proto::worker::LabelConfidence* VideoSummaryResponse::add_label_confs() {
  // @@protoc_insertion_point(field_add:novumind.goku.proto.worker.VideoSummaryResponse.label_confs)
  return _internal_add_label_confs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::novumind::goku::proto::worker::LabelConfidence >&
VideoSummaryResponse::label_confs() const {
  // @@protoc_insertion_point(field_list:novumind.goku.proto.worker.VideoSummaryResponse.label_confs)
  return label_confs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace worker
}  // namespace proto
}  // namespace goku
}  // namespace novumind

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_worker_2eproto
