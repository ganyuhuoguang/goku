// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: worker.proto
#ifndef GRPC_worker_2eproto__INCLUDED
#define GRPC_worker_2eproto__INCLUDED

#include "worker.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace novumind {
namespace goku {
namespace proto {
namespace worker {

class Worker final {
 public:
  static constexpr char const* service_full_name() {
    return "novumind.goku.proto.worker.Worker";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::novumind::goku::proto::worker::AnnotateVideoResponse>> AnnotateVideo(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::AnnotateVideoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::novumind::goku::proto::worker::AnnotateVideoResponse>>(AnnotateVideoRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::novumind::goku::proto::worker::AnnotateVideoResponse>> AsyncAnnotateVideo(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::AnnotateVideoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::novumind::goku::proto::worker::AnnotateVideoResponse>>(AsyncAnnotateVideoRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::novumind::goku::proto::worker::AnnotateVideoResponse>> PrepareAsyncAnnotateVideo(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::AnnotateVideoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::novumind::goku::proto::worker::AnnotateVideoResponse>>(PrepareAsyncAnnotateVideoRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckInferenceCore(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest& request, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::novumind::goku::proto::worker::CheckInferenceCoreResponse>> AsyncCheckInferenceCore(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::novumind::goku::proto::worker::CheckInferenceCoreResponse>>(AsyncCheckInferenceCoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::novumind::goku::proto::worker::CheckInferenceCoreResponse>> PrepareAsyncCheckInferenceCore(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::novumind::goku::proto::worker::CheckInferenceCoreResponse>>(PrepareAsyncCheckInferenceCoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::VideoSummaryResponse>> AnnotateVideoSummary(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::VideoSummaryResponse>>(AnnotateVideoSummaryRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::VideoSummaryResponse>> AsyncAnnotateVideoSummary(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::VideoSummaryResponse>>(AsyncAnnotateVideoSummaryRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::VideoSummaryResponse>> PrepareAsyncAnnotateVideoSummary(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::VideoSummaryResponse>>(PrepareAsyncAnnotateVideoSummaryRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AnnotateVideo(::grpc::ClientContext* context, ::novumind::goku::proto::worker::AnnotateVideoRequest* request, ::grpc::ClientReadReactor< ::novumind::goku::proto::worker::AnnotateVideoResponse>* reactor) = 0;
      #else
      virtual void AnnotateVideo(::grpc::ClientContext* context, ::novumind::goku::proto::worker::AnnotateVideoRequest* request, ::grpc::experimental::ClientReadReactor< ::novumind::goku::proto::worker::AnnotateVideoResponse>* reactor) = 0;
      #endif
      virtual void CheckInferenceCore(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest* request, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckInferenceCore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CheckInferenceCore(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest* request, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CheckInferenceCore(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest* request, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CheckInferenceCore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CheckInferenceCore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AnnotateVideoSummary(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::novumind::goku::proto::worker::AnnotateVideoRequest,::novumind::goku::proto::worker::VideoSummaryResponse>* reactor) = 0;
      #else
      virtual void AnnotateVideoSummary(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::novumind::goku::proto::worker::AnnotateVideoRequest,::novumind::goku::proto::worker::VideoSummaryResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::novumind::goku::proto::worker::AnnotateVideoResponse>* AnnotateVideoRaw(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::AnnotateVideoRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::novumind::goku::proto::worker::AnnotateVideoResponse>* AsyncAnnotateVideoRaw(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::AnnotateVideoRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::novumind::goku::proto::worker::AnnotateVideoResponse>* PrepareAsyncAnnotateVideoRaw(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::AnnotateVideoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::novumind::goku::proto::worker::CheckInferenceCoreResponse>* AsyncCheckInferenceCoreRaw(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::novumind::goku::proto::worker::CheckInferenceCoreResponse>* PrepareAsyncCheckInferenceCoreRaw(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::VideoSummaryResponse>* AnnotateVideoSummaryRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::VideoSummaryResponse>* AsyncAnnotateVideoSummaryRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::VideoSummaryResponse>* PrepareAsyncAnnotateVideoSummaryRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::novumind::goku::proto::worker::AnnotateVideoResponse>> AnnotateVideo(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::AnnotateVideoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::novumind::goku::proto::worker::AnnotateVideoResponse>>(AnnotateVideoRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::novumind::goku::proto::worker::AnnotateVideoResponse>> AsyncAnnotateVideo(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::AnnotateVideoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::novumind::goku::proto::worker::AnnotateVideoResponse>>(AsyncAnnotateVideoRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::novumind::goku::proto::worker::AnnotateVideoResponse>> PrepareAsyncAnnotateVideo(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::AnnotateVideoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::novumind::goku::proto::worker::AnnotateVideoResponse>>(PrepareAsyncAnnotateVideoRaw(context, request, cq));
    }
    ::grpc::Status CheckInferenceCore(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest& request, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::novumind::goku::proto::worker::CheckInferenceCoreResponse>> AsyncCheckInferenceCore(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::novumind::goku::proto::worker::CheckInferenceCoreResponse>>(AsyncCheckInferenceCoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::novumind::goku::proto::worker::CheckInferenceCoreResponse>> PrepareAsyncCheckInferenceCore(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::novumind::goku::proto::worker::CheckInferenceCoreResponse>>(PrepareAsyncCheckInferenceCoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::VideoSummaryResponse>> AnnotateVideoSummary(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::VideoSummaryResponse>>(AnnotateVideoSummaryRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::VideoSummaryResponse>> AsyncAnnotateVideoSummary(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::VideoSummaryResponse>>(AsyncAnnotateVideoSummaryRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::VideoSummaryResponse>> PrepareAsyncAnnotateVideoSummary(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::VideoSummaryResponse>>(PrepareAsyncAnnotateVideoSummaryRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AnnotateVideo(::grpc::ClientContext* context, ::novumind::goku::proto::worker::AnnotateVideoRequest* request, ::grpc::ClientReadReactor< ::novumind::goku::proto::worker::AnnotateVideoResponse>* reactor) override;
      #else
      void AnnotateVideo(::grpc::ClientContext* context, ::novumind::goku::proto::worker::AnnotateVideoRequest* request, ::grpc::experimental::ClientReadReactor< ::novumind::goku::proto::worker::AnnotateVideoResponse>* reactor) override;
      #endif
      void CheckInferenceCore(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest* request, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* response, std::function<void(::grpc::Status)>) override;
      void CheckInferenceCore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CheckInferenceCore(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest* request, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CheckInferenceCore(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest* request, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CheckInferenceCore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CheckInferenceCore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AnnotateVideoSummary(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::novumind::goku::proto::worker::AnnotateVideoRequest,::novumind::goku::proto::worker::VideoSummaryResponse>* reactor) override;
      #else
      void AnnotateVideoSummary(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::novumind::goku::proto::worker::AnnotateVideoRequest,::novumind::goku::proto::worker::VideoSummaryResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::novumind::goku::proto::worker::AnnotateVideoResponse>* AnnotateVideoRaw(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::AnnotateVideoRequest& request) override;
    ::grpc::ClientAsyncReader< ::novumind::goku::proto::worker::AnnotateVideoResponse>* AsyncAnnotateVideoRaw(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::AnnotateVideoRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::novumind::goku::proto::worker::AnnotateVideoResponse>* PrepareAsyncAnnotateVideoRaw(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::AnnotateVideoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::novumind::goku::proto::worker::CheckInferenceCoreResponse>* AsyncCheckInferenceCoreRaw(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::novumind::goku::proto::worker::CheckInferenceCoreResponse>* PrepareAsyncCheckInferenceCoreRaw(::grpc::ClientContext* context, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::VideoSummaryResponse>* AnnotateVideoSummaryRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::VideoSummaryResponse>* AsyncAnnotateVideoSummaryRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::VideoSummaryResponse>* PrepareAsyncAnnotateVideoSummaryRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AnnotateVideo_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckInferenceCore_;
    const ::grpc::internal::RpcMethod rpcmethod_AnnotateVideoSummary_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AnnotateVideo(::grpc::ServerContext* context, const ::novumind::goku::proto::worker::AnnotateVideoRequest* request, ::grpc::ServerWriter< ::novumind::goku::proto::worker::AnnotateVideoResponse>* writer);
    virtual ::grpc::Status CheckInferenceCore(::grpc::ServerContext* context, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest* request, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* response);
    virtual ::grpc::Status AnnotateVideoSummary(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::novumind::goku::proto::worker::VideoSummaryResponse, ::novumind::goku::proto::worker::AnnotateVideoRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_AnnotateVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AnnotateVideo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AnnotateVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnnotateVideo(::grpc::ServerContext* /*context*/, const ::novumind::goku::proto::worker::AnnotateVideoRequest* /*request*/, ::grpc::ServerWriter< ::novumind::goku::proto::worker::AnnotateVideoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAnnotateVideo(::grpc::ServerContext* context, ::novumind::goku::proto::worker::AnnotateVideoRequest* request, ::grpc::ServerAsyncWriter< ::novumind::goku::proto::worker::AnnotateVideoResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckInferenceCore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckInferenceCore() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CheckInferenceCore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckInferenceCore(::grpc::ServerContext* /*context*/, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest* /*request*/, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckInferenceCore(::grpc::ServerContext* context, ::novumind::goku::proto::worker::CheckInferenceCoreRequest* request, ::grpc::ServerAsyncResponseWriter< ::novumind::goku::proto::worker::CheckInferenceCoreResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AnnotateVideoSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AnnotateVideoSummary() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AnnotateVideoSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnnotateVideoSummary(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::novumind::goku::proto::worker::VideoSummaryResponse, ::novumind::goku::proto::worker::AnnotateVideoRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAnnotateVideoSummary(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::novumind::goku::proto::worker::VideoSummaryResponse, ::novumind::goku::proto::worker::AnnotateVideoRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AnnotateVideo<WithAsyncMethod_CheckInferenceCore<WithAsyncMethod_AnnotateVideoSummary<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AnnotateVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AnnotateVideo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::AnnotateVideoResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::novumind::goku::proto::worker::AnnotateVideoRequest* request) { return this->AnnotateVideo(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_AnnotateVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnnotateVideo(::grpc::ServerContext* /*context*/, const ::novumind::goku::proto::worker::AnnotateVideoRequest* /*request*/, ::grpc::ServerWriter< ::novumind::goku::proto::worker::AnnotateVideoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::novumind::goku::proto::worker::AnnotateVideoResponse>* AnnotateVideo(
      ::grpc::CallbackServerContext* /*context*/, const ::novumind::goku::proto::worker::AnnotateVideoRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::novumind::goku::proto::worker::AnnotateVideoResponse>* AnnotateVideo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::novumind::goku::proto::worker::AnnotateVideoRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckInferenceCore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CheckInferenceCore() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::novumind::goku::proto::worker::CheckInferenceCoreRequest, ::novumind::goku::proto::worker::CheckInferenceCoreResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest* request, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* response) { return this->CheckInferenceCore(context, request, response); }));}
    void SetMessageAllocatorFor_CheckInferenceCore(
        ::grpc::experimental::MessageAllocator< ::novumind::goku::proto::worker::CheckInferenceCoreRequest, ::novumind::goku::proto::worker::CheckInferenceCoreResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::novumind::goku::proto::worker::CheckInferenceCoreRequest, ::novumind::goku::proto::worker::CheckInferenceCoreResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckInferenceCore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckInferenceCore(::grpc::ServerContext* /*context*/, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest* /*request*/, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CheckInferenceCore(
      ::grpc::CallbackServerContext* /*context*/, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest* /*request*/, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CheckInferenceCore(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest* /*request*/, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AnnotateVideoSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AnnotateVideoSummary() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackBidiHandler< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::VideoSummaryResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->AnnotateVideoSummary(context); }));
    }
    ~ExperimentalWithCallbackMethod_AnnotateVideoSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnnotateVideoSummary(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::novumind::goku::proto::worker::VideoSummaryResponse, ::novumind::goku::proto::worker::AnnotateVideoRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::VideoSummaryResponse>* AnnotateVideoSummary(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::VideoSummaryResponse>* AnnotateVideoSummary(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_AnnotateVideo<ExperimentalWithCallbackMethod_CheckInferenceCore<ExperimentalWithCallbackMethod_AnnotateVideoSummary<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_AnnotateVideo<ExperimentalWithCallbackMethod_CheckInferenceCore<ExperimentalWithCallbackMethod_AnnotateVideoSummary<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AnnotateVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AnnotateVideo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AnnotateVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnnotateVideo(::grpc::ServerContext* /*context*/, const ::novumind::goku::proto::worker::AnnotateVideoRequest* /*request*/, ::grpc::ServerWriter< ::novumind::goku::proto::worker::AnnotateVideoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckInferenceCore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckInferenceCore() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CheckInferenceCore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckInferenceCore(::grpc::ServerContext* /*context*/, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest* /*request*/, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AnnotateVideoSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AnnotateVideoSummary() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AnnotateVideoSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnnotateVideoSummary(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::novumind::goku::proto::worker::VideoSummaryResponse, ::novumind::goku::proto::worker::AnnotateVideoRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AnnotateVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AnnotateVideo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AnnotateVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnnotateVideo(::grpc::ServerContext* /*context*/, const ::novumind::goku::proto::worker::AnnotateVideoRequest* /*request*/, ::grpc::ServerWriter< ::novumind::goku::proto::worker::AnnotateVideoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAnnotateVideo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckInferenceCore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckInferenceCore() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CheckInferenceCore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckInferenceCore(::grpc::ServerContext* /*context*/, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest* /*request*/, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckInferenceCore(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AnnotateVideoSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AnnotateVideoSummary() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AnnotateVideoSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnnotateVideoSummary(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::novumind::goku::proto::worker::VideoSummaryResponse, ::novumind::goku::proto::worker::AnnotateVideoRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAnnotateVideoSummary(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AnnotateVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AnnotateVideo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->AnnotateVideo(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_AnnotateVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnnotateVideo(::grpc::ServerContext* /*context*/, const ::novumind::goku::proto::worker::AnnotateVideoRequest* /*request*/, ::grpc::ServerWriter< ::novumind::goku::proto::worker::AnnotateVideoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* AnnotateVideo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* AnnotateVideo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckInferenceCore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckInferenceCore() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckInferenceCore(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckInferenceCore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckInferenceCore(::grpc::ServerContext* /*context*/, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest* /*request*/, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CheckInferenceCore(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CheckInferenceCore(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AnnotateVideoSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AnnotateVideoSummary() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->AnnotateVideoSummary(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_AnnotateVideoSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnnotateVideoSummary(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::novumind::goku::proto::worker::VideoSummaryResponse, ::novumind::goku::proto::worker::AnnotateVideoRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* AnnotateVideoSummary(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* AnnotateVideoSummary(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckInferenceCore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckInferenceCore() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::novumind::goku::proto::worker::CheckInferenceCoreRequest, ::novumind::goku::proto::worker::CheckInferenceCoreResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::novumind::goku::proto::worker::CheckInferenceCoreRequest, ::novumind::goku::proto::worker::CheckInferenceCoreResponse>* streamer) {
                       return this->StreamedCheckInferenceCore(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckInferenceCore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckInferenceCore(::grpc::ServerContext* /*context*/, const ::novumind::goku::proto::worker::CheckInferenceCoreRequest* /*request*/, ::novumind::goku::proto::worker::CheckInferenceCoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckInferenceCore(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::novumind::goku::proto::worker::CheckInferenceCoreRequest,::novumind::goku::proto::worker::CheckInferenceCoreResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CheckInferenceCore<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_AnnotateVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_AnnotateVideo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::AnnotateVideoResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::novumind::goku::proto::worker::AnnotateVideoRequest, ::novumind::goku::proto::worker::AnnotateVideoResponse>* streamer) {
                       return this->StreamedAnnotateVideo(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_AnnotateVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AnnotateVideo(::grpc::ServerContext* /*context*/, const ::novumind::goku::proto::worker::AnnotateVideoRequest* /*request*/, ::grpc::ServerWriter< ::novumind::goku::proto::worker::AnnotateVideoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedAnnotateVideo(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::novumind::goku::proto::worker::AnnotateVideoRequest,::novumind::goku::proto::worker::AnnotateVideoResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_AnnotateVideo<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_AnnotateVideo<WithStreamedUnaryMethod_CheckInferenceCore<Service > > StreamedService;
};

}  // namespace worker
}  // namespace proto
}  // namespace goku
}  // namespace novumind


#endif  // GRPC_worker_2eproto__INCLUDED
